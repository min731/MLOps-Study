2024-06-20 22:25:19,724:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:25:19,724:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:25:19,724:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:25:19,724:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:25:23,536:INFO:PyCaret ClassificationExperiment
2024-06-20 22:25:23,536:INFO:Logging name: clf-default-name
2024-06-20 22:25:23,537:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-20 22:25:23,537:INFO:version 3.3.2
2024-06-20 22:25:23,537:INFO:Initializing setup()
2024-06-20 22:25:23,538:INFO:self.USI: a1e2
2024-06-20 22:25:23,538:INFO:self._variable_keys: {'exp_name_log', 'X_train', 'y_train', 'fold_generator', 'html_param', 'exp_id', 'idx', 'gpu_param', 'seed', 'n_jobs_param', 'fix_imbalance', 'USI', 'y', 'log_plots_param', 'target_param', 'gpu_n_jobs_param', 'y_test', 'data', 'pipeline', 'memory', 'X', '_ml_usecase', '_available_plots', 'X_test', 'fold_shuffle_param', 'is_multiclass', 'logging_param', 'fold_groups_param'}
2024-06-20 22:25:23,538:INFO:Checking environment
2024-06-20 22:25:23,538:INFO:python_version: 3.10.14
2024-06-20 22:25:23,538:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-20 22:25:23,539:INFO:machine: AMD64
2024-06-20 22:25:23,539:INFO:platform: Windows-10-10.0.19045-SP0
2024-06-20 22:25:23,545:INFO:Memory: svmem(total=17089769472, available=6514327552, percent=61.9, used=10575441920, free=6514327552)
2024-06-20 22:25:23,546:INFO:Physical Core: 4
2024-06-20 22:25:23,546:INFO:Logical Core: 8
2024-06-20 22:25:23,546:INFO:Checking libraries
2024-06-20 22:25:23,546:INFO:System:
2024-06-20 22:25:23,546:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-20 22:25:23,546:INFO:executable: c:\Users\ypd04\miniconda3\envs\mlops\python.exe
2024-06-20 22:25:23,547:INFO:   machine: Windows-10-10.0.19045-SP0
2024-06-20 22:25:23,547:INFO:PyCaret required dependencies:
2024-06-20 22:25:23,598:INFO:                 pip: 24.0
2024-06-20 22:25:23,598:INFO:          setuptools: 69.5.1
2024-06-20 22:25:23,599:INFO:             pycaret: 3.3.2
2024-06-20 22:25:23,599:INFO:             IPython: 8.25.0
2024-06-20 22:25:23,599:INFO:          ipywidgets: 8.1.3
2024-06-20 22:25:23,599:INFO:                tqdm: 4.66.4
2024-06-20 22:25:23,599:INFO:               numpy: 1.26.4
2024-06-20 22:25:23,599:INFO:              pandas: 2.1.4
2024-06-20 22:25:23,599:INFO:              jinja2: 3.1.4
2024-06-20 22:25:23,599:INFO:               scipy: 1.11.4
2024-06-20 22:25:23,599:INFO:              joblib: 1.3.2
2024-06-20 22:25:23,599:INFO:             sklearn: 1.4.2
2024-06-20 22:25:23,599:INFO:                pyod: 2.0.0
2024-06-20 22:25:23,600:INFO:            imblearn: 0.12.3
2024-06-20 22:25:23,600:INFO:   category_encoders: 2.6.3
2024-06-20 22:25:23,600:INFO:            lightgbm: 4.4.0
2024-06-20 22:25:23,600:INFO:               numba: 0.60.0
2024-06-20 22:25:23,600:INFO:            requests: 2.32.3
2024-06-20 22:25:23,600:INFO:          matplotlib: 3.7.5
2024-06-20 22:25:23,600:INFO:          scikitplot: 0.3.7
2024-06-20 22:25:23,600:INFO:         yellowbrick: 1.5
2024-06-20 22:25:23,600:INFO:              plotly: 5.22.0
2024-06-20 22:25:23,600:INFO:    plotly-resampler: Not installed
2024-06-20 22:25:23,600:INFO:             kaleido: 0.2.1
2024-06-20 22:25:23,600:INFO:           schemdraw: 0.15
2024-06-20 22:25:23,600:INFO:         statsmodels: 0.14.2
2024-06-20 22:25:23,600:INFO:              sktime: 0.26.0
2024-06-20 22:25:23,600:INFO:               tbats: 1.1.3
2024-06-20 22:25:23,601:INFO:            pmdarima: 2.0.4
2024-06-20 22:25:23,601:INFO:              psutil: 6.0.0
2024-06-20 22:25:23,601:INFO:          markupsafe: 2.1.5
2024-06-20 22:25:23,601:INFO:             pickle5: Not installed
2024-06-20 22:25:23,601:INFO:         cloudpickle: 3.0.0
2024-06-20 22:25:23,601:INFO:         deprecation: 2.1.0
2024-06-20 22:25:23,601:INFO:              xxhash: 3.4.1
2024-06-20 22:25:23,601:INFO:           wurlitzer: Not installed
2024-06-20 22:25:23,601:INFO:PyCaret optional dependencies:
2024-06-20 22:25:23,635:INFO:                shap: Not installed
2024-06-20 22:25:23,636:INFO:           interpret: Not installed
2024-06-20 22:25:23,636:INFO:                umap: Not installed
2024-06-20 22:25:23,636:INFO:     ydata_profiling: Not installed
2024-06-20 22:25:23,636:INFO:  explainerdashboard: Not installed
2024-06-20 22:25:23,636:INFO:             autoviz: Not installed
2024-06-20 22:25:23,636:INFO:           fairlearn: Not installed
2024-06-20 22:25:23,636:INFO:          deepchecks: Not installed
2024-06-20 22:25:23,636:INFO:             xgboost: Not installed
2024-06-20 22:25:23,636:INFO:            catboost: Not installed
2024-06-20 22:25:23,636:INFO:              kmodes: Not installed
2024-06-20 22:25:23,636:INFO:             mlxtend: Not installed
2024-06-20 22:25:23,636:INFO:       statsforecast: Not installed
2024-06-20 22:25:23,636:INFO:        tune_sklearn: Not installed
2024-06-20 22:25:23,636:INFO:                 ray: Not installed
2024-06-20 22:25:23,636:INFO:            hyperopt: Not installed
2024-06-20 22:25:23,637:INFO:              optuna: Not installed
2024-06-20 22:25:23,637:INFO:               skopt: Not installed
2024-06-20 22:25:23,637:INFO:              mlflow: Not installed
2024-06-20 22:25:23,637:INFO:              gradio: Not installed
2024-06-20 22:25:23,637:INFO:             fastapi: Not installed
2024-06-20 22:25:23,637:INFO:             uvicorn: Not installed
2024-06-20 22:25:23,637:INFO:              m2cgen: Not installed
2024-06-20 22:25:23,637:INFO:           evidently: Not installed
2024-06-20 22:25:23,637:INFO:               fugue: Not installed
2024-06-20 22:25:23,637:INFO:           streamlit: Not installed
2024-06-20 22:25:23,637:INFO:             prophet: Not installed
2024-06-20 22:25:23,637:INFO:None
2024-06-20 22:25:23,637:INFO:Set up data.
2024-06-20 22:25:23,646:INFO:Set up folding strategy.
2024-06-20 22:25:23,646:INFO:Set up train/test split.
2024-06-20 22:25:23,658:INFO:Set up index.
2024-06-20 22:25:23,658:INFO:Assigning column types.
2024-06-20 22:25:23,664:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-20 22:25:23,710:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,714:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,750:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,750:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,792:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,794:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,821:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,821:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,822:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-20 22:25:23,867:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,894:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,895:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,944:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:25:23,974:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,974:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:23,974:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-20 22:25:24,117:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,117:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,196:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,196:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,200:INFO:Preparing preprocessing pipeline...
2024-06-20 22:25:24,202:INFO:Set up label encoding.
2024-06-20 22:25:24,202:INFO:Set up simple imputation.
2024-06-20 22:25:24,207:INFO:Set up encoding of ordinal features.
2024-06-20 22:25:24,209:INFO:Set up encoding of categorical features.
2024-06-20 22:25:24,279:INFO:Finished creating preprocessing pipeline.
2024-06-20 22:25:24,302:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-06-20 22:25:24,302:INFO:Creating final display dataframe.
2024-06-20 22:25:24,524:INFO:Setup _display_container:                     Description             Value
0                    Session id              7643
1                        Target          Purchase
2                   Target type            Binary
3                Target mapping      CH: 0, MM: 1
4           Original data shape        (1070, 19)
5        Transformed data shape        (1070, 19)
6   Transformed train set shape         (749, 19)
7    Transformed test set shape         (321, 19)
8              Numeric features                17
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              a1e2
2024-06-20 22:25:24,617:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,618:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,698:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,699:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:25:24,700:INFO:setup() successfully completed in 1.17s...............
2024-06-20 22:25:54,396:INFO:Initializing compare_models()
2024-06-20 22:25:54,396:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-06-20 22:25:54,396:INFO:Checking exceptions
2024-06-20 22:25:54,405:INFO:Preparing display monitor
2024-06-20 22:25:54,448:INFO:Initializing Logistic Regression
2024-06-20 22:25:54,449:INFO:Total runtime is 1.6609827677408855e-05 minutes
2024-06-20 22:25:54,456:INFO:SubProcess create_model() called ==================================
2024-06-20 22:25:54,456:INFO:Initializing create_model()
2024-06-20 22:25:54,457:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:25:54,457:INFO:Checking exceptions
2024-06-20 22:25:54,457:INFO:Importing libraries
2024-06-20 22:25:54,458:INFO:Copying training dataset
2024-06-20 22:25:54,471:INFO:Defining folds
2024-06-20 22:25:54,471:INFO:Declaring metric variables
2024-06-20 22:25:54,478:INFO:Importing untrained model
2024-06-20 22:25:54,486:INFO:Logistic Regression Imported successfully
2024-06-20 22:25:54,499:INFO:Starting cross validation
2024-06-20 22:25:54,501:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:03,244:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,292:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,299:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,304:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,411:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,438:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,446:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,461:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,468:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,474:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,484:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,487:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,493:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,499:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,505:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,505:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,511:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,513:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,539:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,545:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,552:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,563:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,570:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,573:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,575:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,577:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,582:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,586:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,588:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,591:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,697:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,725:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,729:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,733:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:26:03,819:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,822:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,826:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:03,838:INFO:Calculating mean and std
2024-06-20 22:26:03,839:INFO:Creating metrics dataframe
2024-06-20 22:26:03,842:INFO:Uploading results into container
2024-06-20 22:26:03,842:INFO:Uploading model into container now
2024-06-20 22:26:03,843:INFO:_master_model_container: 1
2024-06-20 22:26:03,843:INFO:_display_container: 2
2024-06-20 22:26:03,844:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7643, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-20 22:26:03,845:INFO:create_model() successfully completed......................................
2024-06-20 22:26:03,907:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:03,907:INFO:Creating metrics dataframe
2024-06-20 22:26:03,914:INFO:Initializing K Neighbors Classifier
2024-06-20 22:26:03,914:INFO:Total runtime is 0.15776661634445188 minutes
2024-06-20 22:26:03,917:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:03,918:INFO:Initializing create_model()
2024-06-20 22:26:03,918:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:03,918:INFO:Checking exceptions
2024-06-20 22:26:03,918:INFO:Importing libraries
2024-06-20 22:26:03,918:INFO:Copying training dataset
2024-06-20 22:26:03,925:INFO:Defining folds
2024-06-20 22:26:03,925:INFO:Declaring metric variables
2024-06-20 22:26:03,928:INFO:Importing untrained model
2024-06-20 22:26:03,933:INFO:K Neighbors Classifier Imported successfully
2024-06-20 22:26:03,943:INFO:Starting cross validation
2024-06-20 22:26:03,945:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:04,303:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,309:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,310:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,313:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,315:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,315:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,316:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,319:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,321:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,322:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,326:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,329:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,337:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,343:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,353:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,359:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,364:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,365:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,371:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,374:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,375:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,378:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,382:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,424:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,424:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,427:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,430:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,431:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,443:INFO:Calculating mean and std
2024-06-20 22:26:04,444:INFO:Creating metrics dataframe
2024-06-20 22:26:04,446:INFO:Uploading results into container
2024-06-20 22:26:04,447:INFO:Uploading model into container now
2024-06-20 22:26:04,448:INFO:_master_model_container: 2
2024-06-20 22:26:04,448:INFO:_display_container: 2
2024-06-20 22:26:04,448:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-06-20 22:26:04,449:INFO:create_model() successfully completed......................................
2024-06-20 22:26:04,514:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:04,514:INFO:Creating metrics dataframe
2024-06-20 22:26:04,522:INFO:Initializing Naive Bayes
2024-06-20 22:26:04,522:INFO:Total runtime is 0.16789990266164143 minutes
2024-06-20 22:26:04,526:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:04,526:INFO:Initializing create_model()
2024-06-20 22:26:04,526:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:04,527:INFO:Checking exceptions
2024-06-20 22:26:04,527:INFO:Importing libraries
2024-06-20 22:26:04,527:INFO:Copying training dataset
2024-06-20 22:26:04,534:INFO:Defining folds
2024-06-20 22:26:04,535:INFO:Declaring metric variables
2024-06-20 22:26:04,538:INFO:Importing untrained model
2024-06-20 22:26:04,544:INFO:Naive Bayes Imported successfully
2024-06-20 22:26:04,556:INFO:Starting cross validation
2024-06-20 22:26:04,558:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:04,686:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,689:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,692:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,694:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,695:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,698:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,700:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,703:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,706:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,708:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,711:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,714:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,717:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,717:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,719:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,721:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,722:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,726:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,727:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,731:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,734:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,738:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,741:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,777:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,780:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,781:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,783:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,784:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,787:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:04,807:INFO:Calculating mean and std
2024-06-20 22:26:04,808:INFO:Creating metrics dataframe
2024-06-20 22:26:04,810:INFO:Uploading results into container
2024-06-20 22:26:04,811:INFO:Uploading model into container now
2024-06-20 22:26:04,811:INFO:_master_model_container: 3
2024-06-20 22:26:04,811:INFO:_display_container: 2
2024-06-20 22:26:04,812:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-06-20 22:26:04,812:INFO:create_model() successfully completed......................................
2024-06-20 22:26:04,873:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:04,873:INFO:Creating metrics dataframe
2024-06-20 22:26:04,881:INFO:Initializing Decision Tree Classifier
2024-06-20 22:26:04,881:INFO:Total runtime is 0.1738832672437032 minutes
2024-06-20 22:26:04,886:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:04,886:INFO:Initializing create_model()
2024-06-20 22:26:04,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:04,886:INFO:Checking exceptions
2024-06-20 22:26:04,887:INFO:Importing libraries
2024-06-20 22:26:04,887:INFO:Copying training dataset
2024-06-20 22:26:04,893:INFO:Defining folds
2024-06-20 22:26:04,893:INFO:Declaring metric variables
2024-06-20 22:26:04,897:INFO:Importing untrained model
2024-06-20 22:26:04,902:INFO:Decision Tree Classifier Imported successfully
2024-06-20 22:26:04,911:INFO:Starting cross validation
2024-06-20 22:26:04,913:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:05,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,044:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,048:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,049:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,049:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,060:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,061:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,063:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,060:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,067:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,069:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,072:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,075:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,076:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,079:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,081:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,081:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,084:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,087:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,088:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,141:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,145:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,149:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,150:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,153:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,160:INFO:Calculating mean and std
2024-06-20 22:26:05,162:INFO:Creating metrics dataframe
2024-06-20 22:26:05,165:INFO:Uploading results into container
2024-06-20 22:26:05,165:INFO:Uploading model into container now
2024-06-20 22:26:05,166:INFO:_master_model_container: 4
2024-06-20 22:26:05,167:INFO:_display_container: 2
2024-06-20 22:26:05,167:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=7643, splitter='best')
2024-06-20 22:26:05,167:INFO:create_model() successfully completed......................................
2024-06-20 22:26:05,242:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:05,242:INFO:Creating metrics dataframe
2024-06-20 22:26:05,252:INFO:Initializing SVM - Linear Kernel
2024-06-20 22:26:05,252:INFO:Total runtime is 0.18006658554077148 minutes
2024-06-20 22:26:05,257:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:05,257:INFO:Initializing create_model()
2024-06-20 22:26:05,258:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:05,258:INFO:Checking exceptions
2024-06-20 22:26:05,258:INFO:Importing libraries
2024-06-20 22:26:05,258:INFO:Copying training dataset
2024-06-20 22:26:05,269:INFO:Defining folds
2024-06-20 22:26:05,269:INFO:Declaring metric variables
2024-06-20 22:26:05,274:INFO:Importing untrained model
2024-06-20 22:26:05,281:INFO:SVM - Linear Kernel Imported successfully
2024-06-20 22:26:05,289:INFO:Starting cross validation
2024-06-20 22:26:05,291:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:05,417:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,422:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,424:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,425:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:05,426:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,428:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,429:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,431:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,432:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,433:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,434:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,437:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,437:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,439:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:05,442:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,442:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,446:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,451:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,453:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:05,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,459:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,462:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,509:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,514:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:05,516:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,524:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,540:INFO:Calculating mean and std
2024-06-20 22:26:05,541:INFO:Creating metrics dataframe
2024-06-20 22:26:05,543:INFO:Uploading results into container
2024-06-20 22:26:05,544:INFO:Uploading model into container now
2024-06-20 22:26:05,544:INFO:_master_model_container: 5
2024-06-20 22:26:05,544:INFO:_display_container: 2
2024-06-20 22:26:05,545:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=7643, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-06-20 22:26:05,545:INFO:create_model() successfully completed......................................
2024-06-20 22:26:05,609:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:05,609:INFO:Creating metrics dataframe
2024-06-20 22:26:05,621:INFO:Initializing Ridge Classifier
2024-06-20 22:26:05,621:INFO:Total runtime is 0.1862165649731954 minutes
2024-06-20 22:26:05,625:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:05,625:INFO:Initializing create_model()
2024-06-20 22:26:05,626:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:05,626:INFO:Checking exceptions
2024-06-20 22:26:05,626:INFO:Importing libraries
2024-06-20 22:26:05,626:INFO:Copying training dataset
2024-06-20 22:26:05,633:INFO:Defining folds
2024-06-20 22:26:05,633:INFO:Declaring metric variables
2024-06-20 22:26:05,636:INFO:Importing untrained model
2024-06-20 22:26:05,641:INFO:Ridge Classifier Imported successfully
2024-06-20 22:26:05,653:INFO:Starting cross validation
2024-06-20 22:26:05,656:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:05,780:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,788:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,788:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,789:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,793:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,793:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,798:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,799:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,800:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,800:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,805:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,811:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,815:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,816:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,820:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,821:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,821:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,825:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,825:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,828:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,871:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,875:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,875:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,878:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,880:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:05,888:INFO:Calculating mean and std
2024-06-20 22:26:05,889:INFO:Creating metrics dataframe
2024-06-20 22:26:05,891:INFO:Uploading results into container
2024-06-20 22:26:05,892:INFO:Uploading model into container now
2024-06-20 22:26:05,892:INFO:_master_model_container: 6
2024-06-20 22:26:05,892:INFO:_display_container: 2
2024-06-20 22:26:05,892:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=7643, solver='auto',
                tol=0.0001)
2024-06-20 22:26:05,893:INFO:create_model() successfully completed......................................
2024-06-20 22:26:05,952:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:05,952:INFO:Creating metrics dataframe
2024-06-20 22:26:05,961:INFO:Initializing Random Forest Classifier
2024-06-20 22:26:05,962:INFO:Total runtime is 0.19189993143081666 minutes
2024-06-20 22:26:05,966:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:05,966:INFO:Initializing create_model()
2024-06-20 22:26:05,966:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:05,966:INFO:Checking exceptions
2024-06-20 22:26:05,966:INFO:Importing libraries
2024-06-20 22:26:05,966:INFO:Copying training dataset
2024-06-20 22:26:05,973:INFO:Defining folds
2024-06-20 22:26:05,973:INFO:Declaring metric variables
2024-06-20 22:26:05,977:INFO:Importing untrained model
2024-06-20 22:26:06,006:INFO:Random Forest Classifier Imported successfully
2024-06-20 22:26:06,019:INFO:Starting cross validation
2024-06-20 22:26:06,020:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:06,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,524:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,528:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,529:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,530:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,534:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,535:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,536:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,538:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,541:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,544:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,547:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,550:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,553:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,602:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,607:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,613:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,709:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,714:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,749:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,755:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,913:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,917:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,918:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,921:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,922:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:06,938:INFO:Calculating mean and std
2024-06-20 22:26:06,939:INFO:Creating metrics dataframe
2024-06-20 22:26:06,942:INFO:Uploading results into container
2024-06-20 22:26:06,943:INFO:Uploading model into container now
2024-06-20 22:26:06,943:INFO:_master_model_container: 7
2024-06-20 22:26:06,943:INFO:_display_container: 2
2024-06-20 22:26:06,944:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=7643, verbose=0,
                       warm_start=False)
2024-06-20 22:26:06,945:INFO:create_model() successfully completed......................................
2024-06-20 22:26:07,012:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:07,012:INFO:Creating metrics dataframe
2024-06-20 22:26:07,023:INFO:Initializing Quadratic Discriminant Analysis
2024-06-20 22:26:07,023:INFO:Total runtime is 0.2095778505007426 minutes
2024-06-20 22:26:07,028:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:07,028:INFO:Initializing create_model()
2024-06-20 22:26:07,028:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:07,029:INFO:Checking exceptions
2024-06-20 22:26:07,029:INFO:Importing libraries
2024-06-20 22:26:07,029:INFO:Copying training dataset
2024-06-20 22:26:07,037:INFO:Defining folds
2024-06-20 22:26:07,037:INFO:Declaring metric variables
2024-06-20 22:26:07,041:INFO:Importing untrained model
2024-06-20 22:26:07,047:INFO:Quadratic Discriminant Analysis Imported successfully
2024-06-20 22:26:07,063:INFO:Starting cross validation
2024-06-20 22:26:07,066:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:07,160:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,162:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,173:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,174:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,178:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,179:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,196:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,216:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,219:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,222:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,224:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,225:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,226:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,229:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,230:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,231:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,231:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,231:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,236:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,237:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,237:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,237:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,242:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,250:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,255:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,261:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,265:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,271:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,276:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,287:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,291:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:26:07,314:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,317:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,318:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,321:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,321:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,324:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,331:INFO:Calculating mean and std
2024-06-20 22:26:07,332:INFO:Creating metrics dataframe
2024-06-20 22:26:07,334:INFO:Uploading results into container
2024-06-20 22:26:07,335:INFO:Uploading model into container now
2024-06-20 22:26:07,336:INFO:_master_model_container: 8
2024-06-20 22:26:07,336:INFO:_display_container: 2
2024-06-20 22:26:07,336:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-06-20 22:26:07,336:INFO:create_model() successfully completed......................................
2024-06-20 22:26:07,401:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:07,401:INFO:Creating metrics dataframe
2024-06-20 22:26:07,411:INFO:Initializing Ada Boost Classifier
2024-06-20 22:26:07,411:INFO:Total runtime is 0.21604450941085815 minutes
2024-06-20 22:26:07,415:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:07,415:INFO:Initializing create_model()
2024-06-20 22:26:07,416:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:07,416:INFO:Checking exceptions
2024-06-20 22:26:07,416:INFO:Importing libraries
2024-06-20 22:26:07,417:INFO:Copying training dataset
2024-06-20 22:26:07,423:INFO:Defining folds
2024-06-20 22:26:07,424:INFO:Declaring metric variables
2024-06-20 22:26:07,427:INFO:Importing untrained model
2024-06-20 22:26:07,432:INFO:Ada Boost Classifier Imported successfully
2024-06-20 22:26:07,444:INFO:Starting cross validation
2024-06-20 22:26:07,446:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:07,529:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,533:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,535:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,537:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,537:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,538:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,543:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,561:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,790:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,799:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,799:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,800:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,802:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,805:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,806:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,806:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,807:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,807:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,813:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,814:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,819:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,820:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,824:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,825:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,849:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,851:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:26:07,990:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,992:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,995:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:07,996:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,001:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,001:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,021:INFO:Calculating mean and std
2024-06-20 22:26:08,022:INFO:Creating metrics dataframe
2024-06-20 22:26:08,025:INFO:Uploading results into container
2024-06-20 22:26:08,026:INFO:Uploading model into container now
2024-06-20 22:26:08,027:INFO:_master_model_container: 9
2024-06-20 22:26:08,027:INFO:_display_container: 2
2024-06-20 22:26:08,028:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=7643)
2024-06-20 22:26:08,028:INFO:create_model() successfully completed......................................
2024-06-20 22:26:08,087:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:08,088:INFO:Creating metrics dataframe
2024-06-20 22:26:08,097:INFO:Initializing Gradient Boosting Classifier
2024-06-20 22:26:08,097:INFO:Total runtime is 0.22747787237167358 minutes
2024-06-20 22:26:08,101:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:08,101:INFO:Initializing create_model()
2024-06-20 22:26:08,101:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:08,102:INFO:Checking exceptions
2024-06-20 22:26:08,102:INFO:Importing libraries
2024-06-20 22:26:08,102:INFO:Copying training dataset
2024-06-20 22:26:08,108:INFO:Defining folds
2024-06-20 22:26:08,108:INFO:Declaring metric variables
2024-06-20 22:26:08,111:INFO:Importing untrained model
2024-06-20 22:26:08,117:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 22:26:08,127:INFO:Starting cross validation
2024-06-20 22:26:08,128:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:08,572:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,573:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,575:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,577:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,578:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,580:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,581:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,581:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,582:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,584:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,585:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,586:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,587:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,588:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,593:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,600:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,607:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,614:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,619:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,865:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,867:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,868:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,870:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,871:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:08,881:INFO:Calculating mean and std
2024-06-20 22:26:08,882:INFO:Creating metrics dataframe
2024-06-20 22:26:08,884:INFO:Uploading results into container
2024-06-20 22:26:08,885:INFO:Uploading model into container now
2024-06-20 22:26:08,886:INFO:_master_model_container: 10
2024-06-20 22:26:08,886:INFO:_display_container: 2
2024-06-20 22:26:08,886:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7643, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:26:08,887:INFO:create_model() successfully completed......................................
2024-06-20 22:26:08,946:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:08,946:INFO:Creating metrics dataframe
2024-06-20 22:26:08,956:INFO:Initializing Linear Discriminant Analysis
2024-06-20 22:26:08,956:INFO:Total runtime is 0.2417977531750997 minutes
2024-06-20 22:26:08,960:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:08,960:INFO:Initializing create_model()
2024-06-20 22:26:08,960:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:08,960:INFO:Checking exceptions
2024-06-20 22:26:08,961:INFO:Importing libraries
2024-06-20 22:26:08,961:INFO:Copying training dataset
2024-06-20 22:26:08,967:INFO:Defining folds
2024-06-20 22:26:08,967:INFO:Declaring metric variables
2024-06-20 22:26:08,971:INFO:Importing untrained model
2024-06-20 22:26:08,976:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:26:08,985:INFO:Starting cross validation
2024-06-20 22:26:08,988:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:09,109:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,112:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,113:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,114:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,116:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,116:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,118:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,120:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,122:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,123:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,125:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,126:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,127:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,127:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,132:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,135:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,138:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,139:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,144:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,148:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,190:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,193:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,194:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,196:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,197:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,200:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,217:INFO:Calculating mean and std
2024-06-20 22:26:09,218:INFO:Creating metrics dataframe
2024-06-20 22:26:09,220:INFO:Uploading results into container
2024-06-20 22:26:09,221:INFO:Uploading model into container now
2024-06-20 22:26:09,221:INFO:_master_model_container: 11
2024-06-20 22:26:09,221:INFO:_display_container: 2
2024-06-20 22:26:09,221:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:09,222:INFO:create_model() successfully completed......................................
2024-06-20 22:26:09,284:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:09,284:INFO:Creating metrics dataframe
2024-06-20 22:26:09,294:INFO:Initializing Extra Trees Classifier
2024-06-20 22:26:09,294:INFO:Total runtime is 0.24743108749389647 minutes
2024-06-20 22:26:09,298:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:09,299:INFO:Initializing create_model()
2024-06-20 22:26:09,299:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:09,299:INFO:Checking exceptions
2024-06-20 22:26:09,299:INFO:Importing libraries
2024-06-20 22:26:09,299:INFO:Copying training dataset
2024-06-20 22:26:09,305:INFO:Defining folds
2024-06-20 22:26:09,305:INFO:Declaring metric variables
2024-06-20 22:26:09,309:INFO:Importing untrained model
2024-06-20 22:26:09,312:INFO:Extra Trees Classifier Imported successfully
2024-06-20 22:26:09,323:INFO:Starting cross validation
2024-06-20 22:26:09,325:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:09,774:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,779:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,783:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,786:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,789:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,800:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,818:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,823:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,827:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,863:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,867:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,877:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,881:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,881:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,884:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:09,885:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,058:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,061:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,070:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,073:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,076:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,096:INFO:Calculating mean and std
2024-06-20 22:26:10,097:INFO:Creating metrics dataframe
2024-06-20 22:26:10,099:INFO:Uploading results into container
2024-06-20 22:26:10,100:INFO:Uploading model into container now
2024-06-20 22:26:10,101:INFO:_master_model_container: 12
2024-06-20 22:26:10,101:INFO:_display_container: 2
2024-06-20 22:26:10,102:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=7643, verbose=0,
                     warm_start=False)
2024-06-20 22:26:10,102:INFO:create_model() successfully completed......................................
2024-06-20 22:26:10,164:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:10,164:INFO:Creating metrics dataframe
2024-06-20 22:26:10,174:INFO:Initializing Light Gradient Boosting Machine
2024-06-20 22:26:10,174:INFO:Total runtime is 0.26209429105122883 minutes
2024-06-20 22:26:10,178:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:10,178:INFO:Initializing create_model()
2024-06-20 22:26:10,178:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:10,178:INFO:Checking exceptions
2024-06-20 22:26:10,179:INFO:Importing libraries
2024-06-20 22:26:10,179:INFO:Copying training dataset
2024-06-20 22:26:10,186:INFO:Defining folds
2024-06-20 22:26:10,186:INFO:Declaring metric variables
2024-06-20 22:26:10,190:INFO:Importing untrained model
2024-06-20 22:26:10,193:INFO:Light Gradient Boosting Machine Imported successfully
2024-06-20 22:26:10,202:INFO:Starting cross validation
2024-06-20 22:26:10,203:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:10,763:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,763:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,768:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,769:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,773:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,773:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,773:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,779:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,805:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,810:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,815:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,878:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,884:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,909:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,914:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,919:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,924:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,930:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,935:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,946:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,951:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:10,955:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,097:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,102:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,106:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,113:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,117:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,135:INFO:Calculating mean and std
2024-06-20 22:26:11,137:INFO:Creating metrics dataframe
2024-06-20 22:26:11,139:INFO:Uploading results into container
2024-06-20 22:26:11,140:INFO:Uploading model into container now
2024-06-20 22:26:11,141:INFO:_master_model_container: 13
2024-06-20 22:26:11,141:INFO:_display_container: 2
2024-06-20 22:26:11,142:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=7643, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-06-20 22:26:11,142:INFO:create_model() successfully completed......................................
2024-06-20 22:26:11,217:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:11,217:INFO:Creating metrics dataframe
2024-06-20 22:26:11,251:INFO:Initializing Dummy Classifier
2024-06-20 22:26:11,251:INFO:Total runtime is 0.28004433314005533 minutes
2024-06-20 22:26:11,259:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:11,259:INFO:Initializing create_model()
2024-06-20 22:26:11,260:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBD9C6E770>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:11,261:INFO:Checking exceptions
2024-06-20 22:26:11,261:INFO:Importing libraries
2024-06-20 22:26:11,261:INFO:Copying training dataset
2024-06-20 22:26:11,273:INFO:Defining folds
2024-06-20 22:26:11,273:INFO:Declaring metric variables
2024-06-20 22:26:11,284:INFO:Importing untrained model
2024-06-20 22:26:11,291:INFO:Dummy Classifier Imported successfully
2024-06-20 22:26:11,299:INFO:Starting cross validation
2024-06-20 22:26:11,301:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:11,419:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,425:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,425:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,426:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,429:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,430:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,430:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,433:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,433:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,435:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,436:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,436:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,437:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,438:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,439:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,439:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,440:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,441:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,442:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,442:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,442:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,445:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,448:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,457:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,461:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,461:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,463:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,464:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,466:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,466:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,513:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,516:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,518:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,519:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,520:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:26:11,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:11,530:INFO:Calculating mean and std
2024-06-20 22:26:11,531:INFO:Creating metrics dataframe
2024-06-20 22:26:11,534:INFO:Uploading results into container
2024-06-20 22:26:11,534:INFO:Uploading model into container now
2024-06-20 22:26:11,535:INFO:_master_model_container: 14
2024-06-20 22:26:11,535:INFO:_display_container: 2
2024-06-20 22:26:11,535:INFO:DummyClassifier(constant=None, random_state=7643, strategy='prior')
2024-06-20 22:26:11,535:INFO:create_model() successfully completed......................................
2024-06-20 22:26:11,600:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:11,601:INFO:Creating metrics dataframe
2024-06-20 22:26:11,614:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-06-20 22:26:11,623:INFO:Initializing create_model()
2024-06-20 22:26:11,623:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:11,623:INFO:Checking exceptions
2024-06-20 22:26:11,626:INFO:Importing libraries
2024-06-20 22:26:11,626:INFO:Copying training dataset
2024-06-20 22:26:11,633:INFO:Defining folds
2024-06-20 22:26:11,634:INFO:Declaring metric variables
2024-06-20 22:26:11,634:INFO:Importing untrained model
2024-06-20 22:26:11,634:INFO:Declaring custom model
2024-06-20 22:26:11,635:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:26:11,637:INFO:Cross validation set to False
2024-06-20 22:26:11,637:INFO:Fitting Model
2024-06-20 22:26:11,672:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:11,673:INFO:create_model() successfully completed......................................
2024-06-20 22:26:11,771:INFO:_master_model_container: 14
2024-06-20 22:26:11,771:INFO:_display_container: 2
2024-06-20 22:26:11,772:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:11,772:INFO:compare_models() successfully completed......................................
2024-06-20 22:26:55,999:INFO:Initializing tune_model()
2024-06-20 22:26:56,000:INFO:tune_model(estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>)
2024-06-20 22:26:56,000:INFO:Checking exceptions
2024-06-20 22:26:56,028:INFO:Copying training dataset
2024-06-20 22:26:56,037:INFO:Checking base model
2024-06-20 22:26:56,037:INFO:Base model : Linear Discriminant Analysis
2024-06-20 22:26:56,043:INFO:Declaring metric variables
2024-06-20 22:26:56,049:INFO:Defining Hyperparameters
2024-06-20 22:26:56,140:INFO:Tuning with n_jobs=-1
2024-06-20 22:26:56,140:INFO:Initializing RandomizedSearchCV
2024-06-20 22:26:58,296:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
10 fits failed out of a total of 100.
The score on these train-test partitions for these parameters will be set to nan.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py", line 1467, in wrapper
    estimator._validate_params()
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'shrinkage' parameter of LinearDiscriminantAnalysis must be a str among {'auto'}, a float in the range [0.0, 1.0] or None. Got 'empirical' instead.

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-06-20 22:26:58,299:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_search.py:1051: UserWarning: One or more of the test scores are non-finite: [       nan 0.71818018 0.71818018 0.6594955  0.62207207 0.60609009
 0.60340541 0.5927027  0.58466667 0.62066667]
  warnings.warn(

2024-06-20 22:26:58,300:INFO:best_params: {'actual_estimator__solver': 'lsqr', 'actual_estimator__shrinkage': 0.0001}
2024-06-20 22:26:58,302:INFO:Hyperparameter search completed
2024-06-20 22:26:58,302:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:58,303:INFO:Initializing create_model()
2024-06-20 22:26:58,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBFCFA0FA0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'solver': 'lsqr', 'shrinkage': 0.0001})
2024-06-20 22:26:58,303:INFO:Checking exceptions
2024-06-20 22:26:58,304:INFO:Importing libraries
2024-06-20 22:26:58,304:INFO:Copying training dataset
2024-06-20 22:26:58,314:INFO:Defining folds
2024-06-20 22:26:58,314:INFO:Declaring metric variables
2024-06-20 22:26:58,318:INFO:Importing untrained model
2024-06-20 22:26:58,318:INFO:Declaring custom model
2024-06-20 22:26:58,326:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:26:58,337:INFO:Starting cross validation
2024-06-20 22:26:58,340:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:58,495:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,501:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,507:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,513:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,513:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,520:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,525:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,527:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,528:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,534:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,547:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,553:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,554:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,561:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,568:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,580:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,584:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,590:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,603:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,621:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,629:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,637:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,672:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,679:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,686:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,709:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,716:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:58,738:INFO:Calculating mean and std
2024-06-20 22:26:58,740:INFO:Creating metrics dataframe
2024-06-20 22:26:58,748:INFO:Finalizing model
2024-06-20 22:26:58,801:INFO:Uploading results into container
2024-06-20 22:26:58,802:INFO:Uploading model into container now
2024-06-20 22:26:58,803:INFO:_master_model_container: 15
2024-06-20 22:26:58,804:INFO:_display_container: 3
2024-06-20 22:26:58,804:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.0001, solver='lsqr',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:58,805:INFO:create_model() successfully completed......................................
2024-06-20 22:26:58,885:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:58,885:INFO:choose_better activated
2024-06-20 22:26:58,889:INFO:SubProcess create_model() called ==================================
2024-06-20 22:26:58,890:INFO:Initializing create_model()
2024-06-20 22:26:58,891:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:26:58,891:INFO:Checking exceptions
2024-06-20 22:26:58,893:INFO:Importing libraries
2024-06-20 22:26:58,894:INFO:Copying training dataset
2024-06-20 22:26:58,903:INFO:Defining folds
2024-06-20 22:26:58,903:INFO:Declaring metric variables
2024-06-20 22:26:58,904:INFO:Importing untrained model
2024-06-20 22:26:58,904:INFO:Declaring custom model
2024-06-20 22:26:58,905:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:26:58,907:INFO:Starting cross validation
2024-06-20 22:26:58,909:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:26:59,041:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,047:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,049:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,053:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,053:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,060:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,062:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,064:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,066:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,070:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,075:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,080:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,081:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,086:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,090:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,096:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,098:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,105:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,111:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,156:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,160:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,164:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,164:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,170:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,175:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:26:59,183:INFO:Calculating mean and std
2024-06-20 22:26:59,184:INFO:Creating metrics dataframe
2024-06-20 22:26:59,186:INFO:Finalizing model
2024-06-20 22:26:59,227:INFO:Uploading results into container
2024-06-20 22:26:59,228:INFO:Uploading model into container now
2024-06-20 22:26:59,229:INFO:_master_model_container: 16
2024-06-20 22:26:59,229:INFO:_display_container: 4
2024-06-20 22:26:59,229:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:59,229:INFO:create_model() successfully completed......................................
2024-06-20 22:26:59,298:INFO:SubProcess create_model() end ==================================
2024-06-20 22:26:59,299:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001) result for Accuracy is 0.8304
2024-06-20 22:26:59,299:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.0001, solver='lsqr',
                           store_covariance=False, tol=0.0001) result for Accuracy is 0.7182
2024-06-20 22:26:59,299:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001) is best model
2024-06-20 22:26:59,299:INFO:choose_better completed
2024-06-20 22:26:59,300:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-06-20 22:26:59,313:INFO:_master_model_container: 16
2024-06-20 22:26:59,314:INFO:_display_container: 3
2024-06-20 22:26:59,314:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:26:59,314:INFO:tune_model() successfully completed......................................
2024-06-20 22:27:07,063:INFO:Initializing tune_model()
2024-06-20 22:27:07,063:INFO:tune_model(estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>)
2024-06-20 22:27:07,063:INFO:Checking exceptions
2024-06-20 22:27:07,093:INFO:Copying training dataset
2024-06-20 22:27:07,108:INFO:Checking base model
2024-06-20 22:27:07,109:INFO:Base model : Linear Discriminant Analysis
2024-06-20 22:27:07,118:INFO:Declaring metric variables
2024-06-20 22:27:07,137:INFO:Defining Hyperparameters
2024-06-20 22:27:07,257:INFO:Tuning with n_jobs=-1
2024-06-20 22:27:07,257:INFO:Initializing RandomizedSearchCV
2024-06-20 22:27:08,999:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py:547: FitFailedWarning: 
10 fits failed out of a total of 100.
The score on these train-test partitions for these parameters will be set to nan.
If these failures are not expected, you can try to debug them by setting error_score='raise'.

Below are more details about the failures:
--------------------------------------------------------------------------------
10 fits failed with the following error:
Traceback (most recent call last):
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_validation.py", line 895, in _fit_and_score
    estimator.fit(X_train, y_train, **fit_params)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 278, in fit
    fitted_estimator = self._memory_fit(
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\joblib\memory.py", line 353, in __call__
    return self.func(*args, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pipeline.py", line 69, in _fit_one
    transformer.fit(*args)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py", line 1467, in wrapper
    estimator._validate_params()
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py", line 666, in _validate_params
    validate_parameter_constraints(
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 95, in validate_parameter_constraints
    raise InvalidParameterError(
sklearn.utils._param_validation.InvalidParameterError: The 'shrinkage' parameter of LinearDiscriminantAnalysis must be a str among {'auto'}, a float in the range [0.0, 1.0] or None. Got 'empirical' instead.

  warnings.warn(some_fits_failed_message, FitFailedWarning)

2024-06-20 22:27:09,000:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\model_selection\_search.py:1051: UserWarning: One or more of the test scores are non-finite: [       nan 0.71818018 0.71818018 0.6594955  0.62207207 0.60609009
 0.60340541 0.5927027  0.58466667 0.62066667]
  warnings.warn(

2024-06-20 22:27:09,000:INFO:best_params: {'actual_estimator__solver': 'lsqr', 'actual_estimator__shrinkage': 0.0001}
2024-06-20 22:27:09,001:INFO:Hyperparameter search completed
2024-06-20 22:27:09,001:INFO:SubProcess create_model() called ==================================
2024-06-20 22:27:09,002:INFO:Initializing create_model()
2024-06-20 22:27:09,002:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001FBFD180760>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'solver': 'lsqr', 'shrinkage': 0.0001})
2024-06-20 22:27:09,002:INFO:Checking exceptions
2024-06-20 22:27:09,003:INFO:Importing libraries
2024-06-20 22:27:09,004:INFO:Copying training dataset
2024-06-20 22:27:09,012:INFO:Defining folds
2024-06-20 22:27:09,012:INFO:Declaring metric variables
2024-06-20 22:27:09,016:INFO:Importing untrained model
2024-06-20 22:27:09,016:INFO:Declaring custom model
2024-06-20 22:27:09,020:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:27:09,029:INFO:Starting cross validation
2024-06-20 22:27:09,031:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:27:09,155:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,161:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,162:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,164:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,165:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,166:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,167:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,170:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,171:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,171:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,172:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,174:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,176:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,177:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,178:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,180:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,182:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,185:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,189:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,194:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,196:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,199:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,201:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,205:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,244:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,247:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,250:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,254:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,257:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,260:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,275:INFO:Calculating mean and std
2024-06-20 22:27:09,276:INFO:Creating metrics dataframe
2024-06-20 22:27:09,282:INFO:Finalizing model
2024-06-20 22:27:09,319:INFO:Uploading results into container
2024-06-20 22:27:09,321:INFO:Uploading model into container now
2024-06-20 22:27:09,321:INFO:_master_model_container: 17
2024-06-20 22:27:09,322:INFO:_display_container: 4
2024-06-20 22:27:09,322:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.0001, solver='lsqr',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:27:09,322:INFO:create_model() successfully completed......................................
2024-06-20 22:27:09,388:INFO:SubProcess create_model() end ==================================
2024-06-20 22:27:09,388:INFO:choose_better activated
2024-06-20 22:27:09,392:INFO:SubProcess create_model() called ==================================
2024-06-20 22:27:09,393:INFO:Initializing create_model()
2024-06-20 22:27:09,393:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:27:09,393:INFO:Checking exceptions
2024-06-20 22:27:09,395:INFO:Importing libraries
2024-06-20 22:27:09,395:INFO:Copying training dataset
2024-06-20 22:27:09,402:INFO:Defining folds
2024-06-20 22:27:09,402:INFO:Declaring metric variables
2024-06-20 22:27:09,402:INFO:Importing untrained model
2024-06-20 22:27:09,402:INFO:Declaring custom model
2024-06-20 22:27:09,403:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:27:09,404:INFO:Starting cross validation
2024-06-20 22:27:09,405:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:27:09,528:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,534:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,535:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,540:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,541:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,543:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,545:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,546:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,546:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,548:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,549:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,551:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,551:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,553:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,555:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,557:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,560:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,560:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,570:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,575:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,576:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,580:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,581:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,585:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,635:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,638:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,640:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,643:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,644:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,647:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:09,657:INFO:Calculating mean and std
2024-06-20 22:27:09,658:INFO:Creating metrics dataframe
2024-06-20 22:27:09,660:INFO:Finalizing model
2024-06-20 22:27:09,697:INFO:Uploading results into container
2024-06-20 22:27:09,697:INFO:Uploading model into container now
2024-06-20 22:27:09,698:INFO:_master_model_container: 18
2024-06-20 22:27:09,698:INFO:_display_container: 5
2024-06-20 22:27:09,698:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:27:09,698:INFO:create_model() successfully completed......................................
2024-06-20 22:27:09,770:INFO:SubProcess create_model() end ==================================
2024-06-20 22:27:09,771:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001) result for Accuracy is 0.8304
2024-06-20 22:27:09,771:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=0.0001, solver='lsqr',
                           store_covariance=False, tol=0.0001) result for Accuracy is 0.7182
2024-06-20 22:27:09,771:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001) is best model
2024-06-20 22:27:09,771:INFO:choose_better completed
2024-06-20 22:27:09,772:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-06-20 22:27:09,785:INFO:_master_model_container: 18
2024-06-20 22:27:09,785:INFO:_display_container: 4
2024-06-20 22:27:09,786:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:27:09,786:INFO:tune_model() successfully completed......................................
2024-06-20 22:27:29,626:INFO:Initializing plot_model()
2024-06-20 22:27:29,627:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, system=True)
2024-06-20 22:27:29,627:INFO:Checking exceptions
2024-06-20 22:27:29,633:INFO:Preloading libraries
2024-06-20 22:27:29,634:INFO:Copying training dataset
2024-06-20 22:27:29,634:INFO:Plot type: auc
2024-06-20 22:27:29,848:INFO:Fitting Model
2024-06-20 22:27:29,849:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-06-20 22:27:29,850:INFO:Scoring test/hold-out set
2024-06-20 22:27:30,208:INFO:Visual Rendered Successfully
2024-06-20 22:27:30,294:INFO:plot_model() successfully completed......................................
2024-06-20 22:27:30,295:INFO:Initializing plot_model()
2024-06-20 22:27:30,296:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, system=True)
2024-06-20 22:27:30,297:INFO:Checking exceptions
2024-06-20 22:27:30,314:INFO:Preloading libraries
2024-06-20 22:27:30,315:INFO:Copying training dataset
2024-06-20 22:27:30,315:INFO:Plot type: confusion_matrix
2024-06-20 22:27:30,778:INFO:Fitting Model
2024-06-20 22:27:30,779:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but LinearDiscriminantAnalysis was fitted with feature names
  warnings.warn(

2024-06-20 22:27:30,780:INFO:Scoring test/hold-out set
2024-06-20 22:27:31,015:INFO:Visual Rendered Successfully
2024-06-20 22:27:31,121:INFO:plot_model() successfully completed......................................
2024-06-20 22:27:31,144:INFO:Initializing save_model()
2024-06-20 22:27:31,144:INFO:save_model(model=LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-06-20 22:27:31,145:INFO:Adding model into prep_pipe
2024-06-20 22:27:31,152:INFO:best_model.pkl saved in current working directory
2024-06-20 22:27:31,171:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False)
2024-06-20 22:27:31,171:INFO:save_model() successfully completed......................................
2024-06-20 22:27:41,058:INFO:Initializing load_model()
2024-06-20 22:27:41,059:INFO:load_model(model_name=best_model, platform=None, authentication=None, verbose=True)
2024-06-20 22:27:41,111:INFO:Initializing predict_model()
2024-06-20 22:27:41,111:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001FBD9C6E620>, estimator=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 LinearDiscriminantAnalysis(covariance_estimator=None,
                                            n_components=None, priors=None,
                                            shrinkage=None, solver='svd',
                                            store_covariance=False,
                                            tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001FBFD4D0940>)
2024-06-20 22:27:41,111:INFO:Checking exceptions
2024-06-20 22:27:41,111:INFO:Preloading libraries
2024-06-20 22:27:41,114:INFO:Set up data.
2024-06-20 22:27:41,124:INFO:Set up index.
2024-06-20 22:27:41,168:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:41,176:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:27:41,185:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:33,381:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:30:33,382:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:30:33,382:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:30:33,382:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 22:30:36,559:INFO:PyCaret ClassificationExperiment
2024-06-20 22:30:36,560:INFO:Logging name: clf-default-name
2024-06-20 22:30:36,560:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-20 22:30:36,560:INFO:version 3.3.2
2024-06-20 22:30:36,560:INFO:Initializing setup()
2024-06-20 22:30:36,560:INFO:self.USI: f284
2024-06-20 22:30:36,560:INFO:self._variable_keys: {'_ml_usecase', 'n_jobs_param', 'gpu_n_jobs_param', 'exp_id', 'y', 'target_param', 'pipeline', 'logging_param', 'seed', 'y_test', 'fold_shuffle_param', 'memory', 'exp_name_log', 'gpu_param', 'data', 'y_train', 'fold_generator', 'X', 'is_multiclass', 'log_plots_param', 'X_train', 'fix_imbalance', 'X_test', '_available_plots', 'fold_groups_param', 'USI', 'idx', 'html_param'}
2024-06-20 22:30:36,560:INFO:Checking environment
2024-06-20 22:30:36,560:INFO:python_version: 3.10.14
2024-06-20 22:30:36,560:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-20 22:30:36,560:INFO:machine: AMD64
2024-06-20 22:30:36,561:INFO:platform: Windows-10-10.0.19045-SP0
2024-06-20 22:30:36,566:INFO:Memory: svmem(total=17089769472, available=7202111488, percent=57.9, used=9887657984, free=7202111488)
2024-06-20 22:30:36,566:INFO:Physical Core: 4
2024-06-20 22:30:36,566:INFO:Logical Core: 8
2024-06-20 22:30:36,566:INFO:Checking libraries
2024-06-20 22:30:36,567:INFO:System:
2024-06-20 22:30:36,567:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-20 22:30:36,567:INFO:executable: c:\Users\ypd04\miniconda3\envs\mlops\python.exe
2024-06-20 22:30:36,567:INFO:   machine: Windows-10-10.0.19045-SP0
2024-06-20 22:30:36,567:INFO:PyCaret required dependencies:
2024-06-20 22:30:36,607:INFO:                 pip: 24.0
2024-06-20 22:30:36,607:INFO:          setuptools: 69.5.1
2024-06-20 22:30:36,607:INFO:             pycaret: 3.3.2
2024-06-20 22:30:36,607:INFO:             IPython: 8.25.0
2024-06-20 22:30:36,607:INFO:          ipywidgets: 8.1.3
2024-06-20 22:30:36,607:INFO:                tqdm: 4.66.4
2024-06-20 22:30:36,607:INFO:               numpy: 1.26.4
2024-06-20 22:30:36,607:INFO:              pandas: 2.1.4
2024-06-20 22:30:36,607:INFO:              jinja2: 3.1.4
2024-06-20 22:30:36,607:INFO:               scipy: 1.11.4
2024-06-20 22:30:36,608:INFO:              joblib: 1.3.2
2024-06-20 22:30:36,608:INFO:             sklearn: 1.4.2
2024-06-20 22:30:36,608:INFO:                pyod: 2.0.0
2024-06-20 22:30:36,608:INFO:            imblearn: 0.12.3
2024-06-20 22:30:36,608:INFO:   category_encoders: 2.6.3
2024-06-20 22:30:36,608:INFO:            lightgbm: 4.4.0
2024-06-20 22:30:36,608:INFO:               numba: 0.60.0
2024-06-20 22:30:36,608:INFO:            requests: 2.32.3
2024-06-20 22:30:36,608:INFO:          matplotlib: 3.7.5
2024-06-20 22:30:36,608:INFO:          scikitplot: 0.3.7
2024-06-20 22:30:36,608:INFO:         yellowbrick: 1.5
2024-06-20 22:30:36,608:INFO:              plotly: 5.22.0
2024-06-20 22:30:36,608:INFO:    plotly-resampler: Not installed
2024-06-20 22:30:36,608:INFO:             kaleido: 0.2.1
2024-06-20 22:30:36,608:INFO:           schemdraw: 0.15
2024-06-20 22:30:36,608:INFO:         statsmodels: 0.14.2
2024-06-20 22:30:36,608:INFO:              sktime: 0.26.0
2024-06-20 22:30:36,609:INFO:               tbats: 1.1.3
2024-06-20 22:30:36,609:INFO:            pmdarima: 2.0.4
2024-06-20 22:30:36,609:INFO:              psutil: 6.0.0
2024-06-20 22:30:36,609:INFO:          markupsafe: 2.1.5
2024-06-20 22:30:36,609:INFO:             pickle5: Not installed
2024-06-20 22:30:36,609:INFO:         cloudpickle: 3.0.0
2024-06-20 22:30:36,609:INFO:         deprecation: 2.1.0
2024-06-20 22:30:36,609:INFO:              xxhash: 3.4.1
2024-06-20 22:30:36,609:INFO:           wurlitzer: Not installed
2024-06-20 22:30:36,609:INFO:PyCaret optional dependencies:
2024-06-20 22:30:36,640:INFO:                shap: Not installed
2024-06-20 22:30:36,640:INFO:           interpret: Not installed
2024-06-20 22:30:36,640:INFO:                umap: Not installed
2024-06-20 22:30:36,640:INFO:     ydata_profiling: Not installed
2024-06-20 22:30:36,640:INFO:  explainerdashboard: Not installed
2024-06-20 22:30:36,640:INFO:             autoviz: Not installed
2024-06-20 22:30:36,640:INFO:           fairlearn: Not installed
2024-06-20 22:30:36,640:INFO:          deepchecks: Not installed
2024-06-20 22:30:36,640:INFO:             xgboost: Not installed
2024-06-20 22:30:36,640:INFO:            catboost: Not installed
2024-06-20 22:30:36,640:INFO:              kmodes: Not installed
2024-06-20 22:30:36,640:INFO:             mlxtend: Not installed
2024-06-20 22:30:36,640:INFO:       statsforecast: Not installed
2024-06-20 22:30:36,640:INFO:        tune_sklearn: Not installed
2024-06-20 22:30:36,641:INFO:                 ray: Not installed
2024-06-20 22:30:36,641:INFO:            hyperopt: Not installed
2024-06-20 22:30:36,641:INFO:              optuna: Not installed
2024-06-20 22:30:36,641:INFO:               skopt: Not installed
2024-06-20 22:30:36,641:INFO:              mlflow: Not installed
2024-06-20 22:30:36,641:INFO:              gradio: Not installed
2024-06-20 22:30:36,641:INFO:             fastapi: Not installed
2024-06-20 22:30:36,641:INFO:             uvicorn: Not installed
2024-06-20 22:30:36,641:INFO:              m2cgen: Not installed
2024-06-20 22:30:36,641:INFO:           evidently: Not installed
2024-06-20 22:30:36,641:INFO:               fugue: Not installed
2024-06-20 22:30:36,641:INFO:           streamlit: Not installed
2024-06-20 22:30:36,641:INFO:             prophet: Not installed
2024-06-20 22:30:36,641:INFO:None
2024-06-20 22:30:36,641:INFO:Set up data.
2024-06-20 22:30:36,650:INFO:Set up folding strategy.
2024-06-20 22:30:36,650:INFO:Set up train/test split.
2024-06-20 22:30:36,660:INFO:Set up index.
2024-06-20 22:30:36,661:INFO:Assigning column types.
2024-06-20 22:30:36,667:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-20 22:30:36,707:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,712:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,747:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,747:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,789:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,790:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,816:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,816:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,817:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-20 22:30:36,858:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,884:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,886:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,928:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 22:30:36,954:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,954:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:36,954:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-20 22:30:37,087:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,087:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,158:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,158:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,161:INFO:Preparing preprocessing pipeline...
2024-06-20 22:30:37,162:INFO:Set up label encoding.
2024-06-20 22:30:37,162:INFO:Set up simple imputation.
2024-06-20 22:30:37,166:INFO:Set up encoding of ordinal features.
2024-06-20 22:30:37,169:INFO:Set up encoding of categorical features.
2024-06-20 22:30:37,253:INFO:Finished creating preprocessing pipeline.
2024-06-20 22:30:37,270:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-06-20 22:30:37,270:INFO:Creating final display dataframe.
2024-06-20 22:30:37,490:INFO:Setup _display_container:                     Description             Value
0                    Session id              7091
1                        Target          Purchase
2                   Target type            Binary
3                Target mapping      CH: 0, MM: 1
4           Original data shape        (1070, 19)
5        Transformed data shape        (1070, 19)
6   Transformed train set shape         (749, 19)
7    Transformed test set shape         (321, 19)
8              Numeric features                17
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              f284
2024-06-20 22:30:37,581:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,581:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,654:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,654:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 22:30:37,656:INFO:setup() successfully completed in 1.1s...............
2024-06-20 22:30:37,678:INFO:Initializing compare_models()
2024-06-20 22:30:37,678:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-06-20 22:30:37,678:INFO:Checking exceptions
2024-06-20 22:30:37,687:INFO:Preparing display monitor
2024-06-20 22:30:37,725:INFO:Initializing Logistic Regression
2024-06-20 22:30:37,725:INFO:Total runtime is 0.0 minutes
2024-06-20 22:30:37,730:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:37,730:INFO:Initializing create_model()
2024-06-20 22:30:37,730:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:37,731:INFO:Checking exceptions
2024-06-20 22:30:37,731:INFO:Importing libraries
2024-06-20 22:30:37,731:INFO:Copying training dataset
2024-06-20 22:30:37,738:INFO:Defining folds
2024-06-20 22:30:37,739:INFO:Declaring metric variables
2024-06-20 22:30:37,743:INFO:Importing untrained model
2024-06-20 22:30:37,747:INFO:Logistic Regression Imported successfully
2024-06-20 22:30:37,755:INFO:Starting cross validation
2024-06-20 22:30:37,757:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:45,743:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,753:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,804:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,808:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,828:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,859:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,861:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,863:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,865:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,869:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,872:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,876:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,879:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,882:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,888:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,889:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,896:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,917:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:45,921:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,924:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,927:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,930:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,933:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,936:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,946:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,953:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,960:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,977:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,984:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:45,991:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,122:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:46,152:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,155:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,159:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,193:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 22:30:46,219:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,222:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,226:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,244:INFO:Calculating mean and std
2024-06-20 22:30:46,245:INFO:Creating metrics dataframe
2024-06-20 22:30:46,248:INFO:Uploading results into container
2024-06-20 22:30:46,249:INFO:Uploading model into container now
2024-06-20 22:30:46,249:INFO:_master_model_container: 1
2024-06-20 22:30:46,250:INFO:_display_container: 2
2024-06-20 22:30:46,250:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=7091, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-20 22:30:46,251:INFO:create_model() successfully completed......................................
2024-06-20 22:30:46,320:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:46,321:INFO:Creating metrics dataframe
2024-06-20 22:30:46,328:INFO:Initializing K Neighbors Classifier
2024-06-20 22:30:46,328:INFO:Total runtime is 0.14338337182998656 minutes
2024-06-20 22:30:46,332:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:46,333:INFO:Initializing create_model()
2024-06-20 22:30:46,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:46,334:INFO:Checking exceptions
2024-06-20 22:30:46,334:INFO:Importing libraries
2024-06-20 22:30:46,334:INFO:Copying training dataset
2024-06-20 22:30:46,341:INFO:Defining folds
2024-06-20 22:30:46,341:INFO:Declaring metric variables
2024-06-20 22:30:46,344:INFO:Importing untrained model
2024-06-20 22:30:46,349:INFO:K Neighbors Classifier Imported successfully
2024-06-20 22:30:46,360:INFO:Starting cross validation
2024-06-20 22:30:46,362:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:46,694:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,698:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,704:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,704:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,709:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,710:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,711:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,712:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,715:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,715:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,716:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,720:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,730:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,736:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,738:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,741:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,743:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,745:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,790:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,793:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,794:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,797:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,799:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:46,805:INFO:Calculating mean and std
2024-06-20 22:30:46,806:INFO:Creating metrics dataframe
2024-06-20 22:30:46,808:INFO:Uploading results into container
2024-06-20 22:30:46,809:INFO:Uploading model into container now
2024-06-20 22:30:46,809:INFO:_master_model_container: 2
2024-06-20 22:30:46,809:INFO:_display_container: 2
2024-06-20 22:30:46,809:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-06-20 22:30:46,810:INFO:create_model() successfully completed......................................
2024-06-20 22:30:46,874:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:46,874:INFO:Creating metrics dataframe
2024-06-20 22:30:46,881:INFO:Initializing Naive Bayes
2024-06-20 22:30:46,882:INFO:Total runtime is 0.15261704524358113 minutes
2024-06-20 22:30:46,886:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:46,886:INFO:Initializing create_model()
2024-06-20 22:30:46,886:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:46,887:INFO:Checking exceptions
2024-06-20 22:30:46,887:INFO:Importing libraries
2024-06-20 22:30:46,887:INFO:Copying training dataset
2024-06-20 22:30:46,894:INFO:Defining folds
2024-06-20 22:30:46,894:INFO:Declaring metric variables
2024-06-20 22:30:46,898:INFO:Importing untrained model
2024-06-20 22:30:46,902:INFO:Naive Bayes Imported successfully
2024-06-20 22:30:46,910:INFO:Starting cross validation
2024-06-20 22:30:46,912:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:47,044:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,048:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,052:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,053:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,057:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,057:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,061:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,063:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,064:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,065:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,067:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,070:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,073:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,074:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,077:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,081:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,085:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,091:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,142:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,143:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,146:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,146:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,149:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,150:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,170:INFO:Calculating mean and std
2024-06-20 22:30:47,171:INFO:Creating metrics dataframe
2024-06-20 22:30:47,173:INFO:Uploading results into container
2024-06-20 22:30:47,174:INFO:Uploading model into container now
2024-06-20 22:30:47,175:INFO:_master_model_container: 3
2024-06-20 22:30:47,175:INFO:_display_container: 2
2024-06-20 22:30:47,176:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-06-20 22:30:47,176:INFO:create_model() successfully completed......................................
2024-06-20 22:30:47,239:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:47,239:INFO:Creating metrics dataframe
2024-06-20 22:30:47,247:INFO:Initializing Decision Tree Classifier
2024-06-20 22:30:47,247:INFO:Total runtime is 0.1587002992630005 minutes
2024-06-20 22:30:47,251:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:47,252:INFO:Initializing create_model()
2024-06-20 22:30:47,252:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:47,252:INFO:Checking exceptions
2024-06-20 22:30:47,252:INFO:Importing libraries
2024-06-20 22:30:47,252:INFO:Copying training dataset
2024-06-20 22:30:47,258:INFO:Defining folds
2024-06-20 22:30:47,258:INFO:Declaring metric variables
2024-06-20 22:30:47,263:INFO:Importing untrained model
2024-06-20 22:30:47,267:INFO:Decision Tree Classifier Imported successfully
2024-06-20 22:30:47,274:INFO:Starting cross validation
2024-06-20 22:30:47,276:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:47,404:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,404:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,408:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,410:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,410:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,410:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,413:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,414:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,415:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,415:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,416:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,416:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,417:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,419:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,420:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,421:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,421:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,423:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,427:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,429:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,435:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,440:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,444:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,496:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,498:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,500:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,501:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,503:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,504:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,519:INFO:Calculating mean and std
2024-06-20 22:30:47,521:INFO:Creating metrics dataframe
2024-06-20 22:30:47,523:INFO:Uploading results into container
2024-06-20 22:30:47,523:INFO:Uploading model into container now
2024-06-20 22:30:47,524:INFO:_master_model_container: 4
2024-06-20 22:30:47,524:INFO:_display_container: 2
2024-06-20 22:30:47,524:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=7091, splitter='best')
2024-06-20 22:30:47,524:INFO:create_model() successfully completed......................................
2024-06-20 22:30:47,585:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:47,585:INFO:Creating metrics dataframe
2024-06-20 22:30:47,594:INFO:Initializing SVM - Linear Kernel
2024-06-20 22:30:47,594:INFO:Total runtime is 0.16448334455490113 minutes
2024-06-20 22:30:47,598:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:47,598:INFO:Initializing create_model()
2024-06-20 22:30:47,598:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:47,599:INFO:Checking exceptions
2024-06-20 22:30:47,599:INFO:Importing libraries
2024-06-20 22:30:47,599:INFO:Copying training dataset
2024-06-20 22:30:47,606:INFO:Defining folds
2024-06-20 22:30:47,606:INFO:Declaring metric variables
2024-06-20 22:30:47,609:INFO:Importing untrained model
2024-06-20 22:30:47,614:INFO:SVM - Linear Kernel Imported successfully
2024-06-20 22:30:47,622:INFO:Starting cross validation
2024-06-20 22:30:47,623:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:47,748:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,749:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,753:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,755:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,756:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:47,756:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:47,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,762:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,762:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,763:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,765:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,767:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:47,768:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,769:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,768:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,772:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,775:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,776:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,780:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,781:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,785:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,786:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,789:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,791:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,792:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,837:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,840:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,841:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:47,843:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,845:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,848:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,851:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:47,871:INFO:Calculating mean and std
2024-06-20 22:30:47,873:INFO:Creating metrics dataframe
2024-06-20 22:30:47,874:INFO:Uploading results into container
2024-06-20 22:30:47,875:INFO:Uploading model into container now
2024-06-20 22:30:47,875:INFO:_master_model_container: 5
2024-06-20 22:30:47,875:INFO:_display_container: 2
2024-06-20 22:30:47,876:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=7091, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-06-20 22:30:47,876:INFO:create_model() successfully completed......................................
2024-06-20 22:30:47,937:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:47,938:INFO:Creating metrics dataframe
2024-06-20 22:30:47,949:INFO:Initializing Ridge Classifier
2024-06-20 22:30:47,949:INFO:Total runtime is 0.1703999916712443 minutes
2024-06-20 22:30:47,953:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:47,953:INFO:Initializing create_model()
2024-06-20 22:30:47,953:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:47,954:INFO:Checking exceptions
2024-06-20 22:30:47,954:INFO:Importing libraries
2024-06-20 22:30:47,954:INFO:Copying training dataset
2024-06-20 22:30:47,960:INFO:Defining folds
2024-06-20 22:30:47,960:INFO:Declaring metric variables
2024-06-20 22:30:47,963:INFO:Importing untrained model
2024-06-20 22:30:47,968:INFO:Ridge Classifier Imported successfully
2024-06-20 22:30:47,975:INFO:Starting cross validation
2024-06-20 22:30:47,976:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:48,091:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,097:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,102:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,102:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,105:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,106:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,108:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,110:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,111:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,112:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,113:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,115:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,115:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,117:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,117:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,118:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,119:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,125:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,126:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,130:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,136:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,140:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,183:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,187:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,191:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,194:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,198:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,202:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,221:INFO:Calculating mean and std
2024-06-20 22:30:48,222:INFO:Creating metrics dataframe
2024-06-20 22:30:48,225:INFO:Uploading results into container
2024-06-20 22:30:48,225:INFO:Uploading model into container now
2024-06-20 22:30:48,226:INFO:_master_model_container: 6
2024-06-20 22:30:48,226:INFO:_display_container: 2
2024-06-20 22:30:48,227:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=7091, solver='auto',
                tol=0.0001)
2024-06-20 22:30:48,227:INFO:create_model() successfully completed......................................
2024-06-20 22:30:48,289:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:48,289:INFO:Creating metrics dataframe
2024-06-20 22:30:48,298:INFO:Initializing Random Forest Classifier
2024-06-20 22:30:48,298:INFO:Total runtime is 0.1762166698773702 minutes
2024-06-20 22:30:48,303:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:48,303:INFO:Initializing create_model()
2024-06-20 22:30:48,303:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:48,303:INFO:Checking exceptions
2024-06-20 22:30:48,304:INFO:Importing libraries
2024-06-20 22:30:48,304:INFO:Copying training dataset
2024-06-20 22:30:48,310:INFO:Defining folds
2024-06-20 22:30:48,310:INFO:Declaring metric variables
2024-06-20 22:30:48,314:INFO:Importing untrained model
2024-06-20 22:30:48,318:INFO:Random Forest Classifier Imported successfully
2024-06-20 22:30:48,326:INFO:Starting cross validation
2024-06-20 22:30:48,328:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:48,846:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,846:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,846:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,852:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,852:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,852:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,857:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,857:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,858:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,864:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,870:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,876:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,878:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,884:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,890:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,951:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,956:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,961:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,981:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,988:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:48,993:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,011:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,016:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,020:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,205:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,208:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,211:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,220:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,223:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,227:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,246:INFO:Calculating mean and std
2024-06-20 22:30:49,247:INFO:Creating metrics dataframe
2024-06-20 22:30:49,250:INFO:Uploading results into container
2024-06-20 22:30:49,251:INFO:Uploading model into container now
2024-06-20 22:30:49,251:INFO:_master_model_container: 7
2024-06-20 22:30:49,251:INFO:_display_container: 2
2024-06-20 22:30:49,252:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=7091, verbose=0,
                       warm_start=False)
2024-06-20 22:30:49,252:INFO:create_model() successfully completed......................................
2024-06-20 22:30:49,315:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:49,315:INFO:Creating metrics dataframe
2024-06-20 22:30:49,325:INFO:Initializing Quadratic Discriminant Analysis
2024-06-20 22:30:49,325:INFO:Total runtime is 0.1933337132136027 minutes
2024-06-20 22:30:49,329:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:49,330:INFO:Initializing create_model()
2024-06-20 22:30:49,330:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:49,330:INFO:Checking exceptions
2024-06-20 22:30:49,330:INFO:Importing libraries
2024-06-20 22:30:49,330:INFO:Copying training dataset
2024-06-20 22:30:49,336:INFO:Defining folds
2024-06-20 22:30:49,336:INFO:Declaring metric variables
2024-06-20 22:30:49,339:INFO:Importing untrained model
2024-06-20 22:30:49,343:INFO:Quadratic Discriminant Analysis Imported successfully
2024-06-20 22:30:49,350:INFO:Starting cross validation
2024-06-20 22:30:49,352:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:49,427:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,434:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,437:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,438:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,441:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,446:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,463:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,474:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,480:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,482:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,483:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,485:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,486:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,489:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,489:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,493:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,494:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,495:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,499:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,502:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,506:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,511:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,515:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,520:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,520:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,536:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,543:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 22:30:49,565:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,570:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,575:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,579:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,582:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:49,597:INFO:Calculating mean and std
2024-06-20 22:30:49,598:INFO:Creating metrics dataframe
2024-06-20 22:30:49,601:INFO:Uploading results into container
2024-06-20 22:30:49,602:INFO:Uploading model into container now
2024-06-20 22:30:49,603:INFO:_master_model_container: 8
2024-06-20 22:30:49,603:INFO:_display_container: 2
2024-06-20 22:30:49,604:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-06-20 22:30:49,604:INFO:create_model() successfully completed......................................
2024-06-20 22:30:49,668:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:49,668:INFO:Creating metrics dataframe
2024-06-20 22:30:49,677:INFO:Initializing Ada Boost Classifier
2024-06-20 22:30:49,677:INFO:Total runtime is 0.1992006262143453 minutes
2024-06-20 22:30:49,681:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:49,681:INFO:Initializing create_model()
2024-06-20 22:30:49,681:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:49,682:INFO:Checking exceptions
2024-06-20 22:30:49,682:INFO:Importing libraries
2024-06-20 22:30:49,682:INFO:Copying training dataset
2024-06-20 22:30:49,688:INFO:Defining folds
2024-06-20 22:30:49,688:INFO:Declaring metric variables
2024-06-20 22:30:49,692:INFO:Importing untrained model
2024-06-20 22:30:49,695:INFO:Ada Boost Classifier Imported successfully
2024-06-20 22:30:49,703:INFO:Starting cross validation
2024-06-20 22:30:49,705:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:49,776:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,777:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,783:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,787:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,789:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,792:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:49,817:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:50,030:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,032:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,040:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,042:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,044:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,047:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,049:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,053:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,062:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,067:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,068:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,071:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,071:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,075:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,092:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:50,093:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 22:30:50,239:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,242:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,244:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,245:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,246:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,257:INFO:Calculating mean and std
2024-06-20 22:30:50,258:INFO:Creating metrics dataframe
2024-06-20 22:30:50,260:INFO:Uploading results into container
2024-06-20 22:30:50,261:INFO:Uploading model into container now
2024-06-20 22:30:50,261:INFO:_master_model_container: 9
2024-06-20 22:30:50,262:INFO:_display_container: 2
2024-06-20 22:30:50,262:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=7091)
2024-06-20 22:30:50,262:INFO:create_model() successfully completed......................................
2024-06-20 22:30:50,321:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:50,321:INFO:Creating metrics dataframe
2024-06-20 22:30:50,330:INFO:Initializing Gradient Boosting Classifier
2024-06-20 22:30:50,330:INFO:Total runtime is 0.21008735100428264 minutes
2024-06-20 22:30:50,334:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:50,334:INFO:Initializing create_model()
2024-06-20 22:30:50,334:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:50,334:INFO:Checking exceptions
2024-06-20 22:30:50,334:INFO:Importing libraries
2024-06-20 22:30:50,334:INFO:Copying training dataset
2024-06-20 22:30:50,340:INFO:Defining folds
2024-06-20 22:30:50,340:INFO:Declaring metric variables
2024-06-20 22:30:50,344:INFO:Importing untrained model
2024-06-20 22:30:50,349:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 22:30:50,356:INFO:Starting cross validation
2024-06-20 22:30:50,357:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:50,777:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,777:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,782:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,784:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,786:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,788:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,790:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,792:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,792:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,795:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,797:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,798:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,802:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,803:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,804:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,806:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,811:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,829:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,833:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,836:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,843:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:50,846:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,052:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,053:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,058:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,074:INFO:Calculating mean and std
2024-06-20 22:30:51,075:INFO:Creating metrics dataframe
2024-06-20 22:30:51,077:INFO:Uploading results into container
2024-06-20 22:30:51,078:INFO:Uploading model into container now
2024-06-20 22:30:51,079:INFO:_master_model_container: 10
2024-06-20 22:30:51,079:INFO:_display_container: 2
2024-06-20 22:30:51,080:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:30:51,080:INFO:create_model() successfully completed......................................
2024-06-20 22:30:51,157:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:51,158:INFO:Creating metrics dataframe
2024-06-20 22:30:51,167:INFO:Initializing Linear Discriminant Analysis
2024-06-20 22:30:51,167:INFO:Total runtime is 0.2240434964497884 minutes
2024-06-20 22:30:51,171:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:51,171:INFO:Initializing create_model()
2024-06-20 22:30:51,172:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:51,172:INFO:Checking exceptions
2024-06-20 22:30:51,172:INFO:Importing libraries
2024-06-20 22:30:51,172:INFO:Copying training dataset
2024-06-20 22:30:51,178:INFO:Defining folds
2024-06-20 22:30:51,179:INFO:Declaring metric variables
2024-06-20 22:30:51,183:INFO:Importing untrained model
2024-06-20 22:30:51,187:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 22:30:51,194:INFO:Starting cross validation
2024-06-20 22:30:51,196:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:51,312:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,313:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,314:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,317:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,318:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,319:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,322:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,323:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,323:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,324:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,329:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,329:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,330:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,331:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,331:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,336:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,337:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,337:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,342:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,352:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,355:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,358:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,396:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,398:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,399:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,401:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,401:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,403:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,410:INFO:Calculating mean and std
2024-06-20 22:30:51,412:INFO:Creating metrics dataframe
2024-06-20 22:30:51,414:INFO:Uploading results into container
2024-06-20 22:30:51,415:INFO:Uploading model into container now
2024-06-20 22:30:51,416:INFO:_master_model_container: 11
2024-06-20 22:30:51,416:INFO:_display_container: 2
2024-06-20 22:30:51,417:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 22:30:51,417:INFO:create_model() successfully completed......................................
2024-06-20 22:30:51,478:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:51,479:INFO:Creating metrics dataframe
2024-06-20 22:30:51,488:INFO:Initializing Extra Trees Classifier
2024-06-20 22:30:51,489:INFO:Total runtime is 0.229410719871521 minutes
2024-06-20 22:30:51,493:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:51,494:INFO:Initializing create_model()
2024-06-20 22:30:51,494:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:51,494:INFO:Checking exceptions
2024-06-20 22:30:51,494:INFO:Importing libraries
2024-06-20 22:30:51,495:INFO:Copying training dataset
2024-06-20 22:30:51,501:INFO:Defining folds
2024-06-20 22:30:51,501:INFO:Declaring metric variables
2024-06-20 22:30:51,504:INFO:Importing untrained model
2024-06-20 22:30:51,508:INFO:Extra Trees Classifier Imported successfully
2024-06-20 22:30:51,516:INFO:Starting cross validation
2024-06-20 22:30:51,517:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:51,956:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,957:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,962:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,962:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,967:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,973:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,973:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,979:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,979:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,979:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,984:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:51,985:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,061:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,064:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,067:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,077:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,080:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,084:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,106:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,110:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,113:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,271:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,273:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,274:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,277:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,278:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,280:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,296:INFO:Calculating mean and std
2024-06-20 22:30:52,297:INFO:Creating metrics dataframe
2024-06-20 22:30:52,299:INFO:Uploading results into container
2024-06-20 22:30:52,300:INFO:Uploading model into container now
2024-06-20 22:30:52,300:INFO:_master_model_container: 12
2024-06-20 22:30:52,300:INFO:_display_container: 2
2024-06-20 22:30:52,301:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=7091, verbose=0,
                     warm_start=False)
2024-06-20 22:30:52,301:INFO:create_model() successfully completed......................................
2024-06-20 22:30:52,364:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:52,364:INFO:Creating metrics dataframe
2024-06-20 22:30:52,375:INFO:Initializing Light Gradient Boosting Machine
2024-06-20 22:30:52,375:INFO:Total runtime is 0.24417682091395063 minutes
2024-06-20 22:30:52,379:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:52,380:INFO:Initializing create_model()
2024-06-20 22:30:52,380:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:52,380:INFO:Checking exceptions
2024-06-20 22:30:52,380:INFO:Importing libraries
2024-06-20 22:30:52,380:INFO:Copying training dataset
2024-06-20 22:30:52,388:INFO:Defining folds
2024-06-20 22:30:52,388:INFO:Declaring metric variables
2024-06-20 22:30:52,391:INFO:Importing untrained model
2024-06-20 22:30:52,397:INFO:Light Gradient Boosting Machine Imported successfully
2024-06-20 22:30:52,407:INFO:Starting cross validation
2024-06-20 22:30:52,409:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:52,948:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,952:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,953:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,957:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,959:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,962:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,963:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,968:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,973:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,987:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,992:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:52,997:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,101:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,106:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,111:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,117:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,126:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,131:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,284:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,289:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,290:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,294:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,295:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,299:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,317:INFO:Calculating mean and std
2024-06-20 22:30:53,318:INFO:Creating metrics dataframe
2024-06-20 22:30:53,321:INFO:Uploading results into container
2024-06-20 22:30:53,322:INFO:Uploading model into container now
2024-06-20 22:30:53,322:INFO:_master_model_container: 13
2024-06-20 22:30:53,323:INFO:_display_container: 2
2024-06-20 22:30:53,323:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=7091, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-06-20 22:30:53,324:INFO:create_model() successfully completed......................................
2024-06-20 22:30:53,404:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:53,404:INFO:Creating metrics dataframe
2024-06-20 22:30:53,416:INFO:Initializing Dummy Classifier
2024-06-20 22:30:53,416:INFO:Total runtime is 0.26152682701746627 minutes
2024-06-20 22:30:53,420:INFO:SubProcess create_model() called ==================================
2024-06-20 22:30:53,421:INFO:Initializing create_model()
2024-06-20 22:30:53,421:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C8DFE7F8E0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:53,421:INFO:Checking exceptions
2024-06-20 22:30:53,421:INFO:Importing libraries
2024-06-20 22:30:53,421:INFO:Copying training dataset
2024-06-20 22:30:53,428:INFO:Defining folds
2024-06-20 22:30:53,428:INFO:Declaring metric variables
2024-06-20 22:30:53,432:INFO:Importing untrained model
2024-06-20 22:30:53,438:INFO:Dummy Classifier Imported successfully
2024-06-20 22:30:53,454:INFO:Starting cross validation
2024-06-20 22:30:53,457:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:30:53,600:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,601:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,605:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,609:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,610:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,611:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,612:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,614:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,614:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,615:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,618:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,618:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,631:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,635:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,637:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,639:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,640:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,640:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,642:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,642:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,643:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,643:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,645:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,646:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,646:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,646:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,648:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,650:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,653:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,697:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,698:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,700:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,701:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,703:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 22:30:53,704:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:30:53,715:INFO:Calculating mean and std
2024-06-20 22:30:53,716:INFO:Creating metrics dataframe
2024-06-20 22:30:53,718:INFO:Uploading results into container
2024-06-20 22:30:53,719:INFO:Uploading model into container now
2024-06-20 22:30:53,720:INFO:_master_model_container: 14
2024-06-20 22:30:53,720:INFO:_display_container: 2
2024-06-20 22:30:53,720:INFO:DummyClassifier(constant=None, random_state=7091, strategy='prior')
2024-06-20 22:30:53,720:INFO:create_model() successfully completed......................................
2024-06-20 22:30:53,786:INFO:SubProcess create_model() end ==================================
2024-06-20 22:30:53,786:INFO:Creating metrics dataframe
2024-06-20 22:30:53,799:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-06-20 22:30:53,809:INFO:Initializing create_model()
2024-06-20 22:30:53,809:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:30:53,809:INFO:Checking exceptions
2024-06-20 22:30:53,811:INFO:Importing libraries
2024-06-20 22:30:53,812:INFO:Copying training dataset
2024-06-20 22:30:53,817:INFO:Defining folds
2024-06-20 22:30:53,818:INFO:Declaring metric variables
2024-06-20 22:30:53,818:INFO:Importing untrained model
2024-06-20 22:30:53,818:INFO:Declaring custom model
2024-06-20 22:30:53,818:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 22:30:53,819:INFO:Cross validation set to False
2024-06-20 22:30:53,819:INFO:Fitting Model
2024-06-20 22:30:54,034:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:30:54,034:INFO:create_model() successfully completed......................................
2024-06-20 22:30:54,124:INFO:_master_model_container: 14
2024-06-20 22:30:54,124:INFO:_display_container: 2
2024-06-20 22:30:54,125:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:30:54,125:INFO:compare_models() successfully completed......................................
2024-06-20 22:30:54,150:INFO:Initializing tune_model()
2024-06-20 22:30:54,151:INFO:tune_model(estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>)
2024-06-20 22:30:54,151:INFO:Checking exceptions
2024-06-20 22:30:54,173:INFO:Copying training dataset
2024-06-20 22:30:54,183:INFO:Checking base model
2024-06-20 22:30:54,184:INFO:Base model : Gradient Boosting Classifier
2024-06-20 22:30:54,203:INFO:Declaring metric variables
2024-06-20 22:30:54,213:INFO:Defining Hyperparameters
2024-06-20 22:30:54,280:INFO:Tuning with n_jobs=-1
2024-06-20 22:30:54,281:INFO:Initializing RandomizedSearchCV
2024-06-20 22:31:05,536:INFO:best_params: {'actual_estimator__subsample': 0.75, 'actual_estimator__n_estimators': 190, 'actual_estimator__min_samples_split': 7, 'actual_estimator__min_samples_leaf': 1, 'actual_estimator__min_impurity_decrease': 0.5, 'actual_estimator__max_features': 'sqrt', 'actual_estimator__max_depth': 10, 'actual_estimator__learning_rate': 0.1}
2024-06-20 22:31:05,536:INFO:Hyperparameter search completed
2024-06-20 22:31:05,537:INFO:SubProcess create_model() called ==================================
2024-06-20 22:31:05,537:INFO:Initializing create_model()
2024-06-20 22:31:05,538:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001C88375A8F0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'subsample': 0.75, 'n_estimators': 190, 'min_samples_split': 7, 'min_samples_leaf': 1, 'min_impurity_decrease': 0.5, 'max_features': 'sqrt', 'max_depth': 10, 'learning_rate': 0.1})
2024-06-20 22:31:05,538:INFO:Checking exceptions
2024-06-20 22:31:05,538:INFO:Importing libraries
2024-06-20 22:31:05,538:INFO:Copying training dataset
2024-06-20 22:31:05,545:INFO:Defining folds
2024-06-20 22:31:05,545:INFO:Declaring metric variables
2024-06-20 22:31:05,549:INFO:Importing untrained model
2024-06-20 22:31:05,549:INFO:Declaring custom model
2024-06-20 22:31:05,553:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 22:31:05,561:INFO:Starting cross validation
2024-06-20 22:31:05,563:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:31:05,992:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:05,998:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:05,999:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,004:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,005:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,006:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,008:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,010:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,012:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,013:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,015:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,019:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,019:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,021:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,025:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,033:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,038:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,039:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,042:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,046:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,051:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,257:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,261:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,265:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,267:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,270:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,273:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:06,289:INFO:Calculating mean and std
2024-06-20 22:31:06,290:INFO:Creating metrics dataframe
2024-06-20 22:31:06,295:INFO:Finalizing model
2024-06-20 22:31:06,496:INFO:Uploading results into container
2024-06-20 22:31:06,497:INFO:Uploading model into container now
2024-06-20 22:31:06,498:INFO:_master_model_container: 15
2024-06-20 22:31:06,498:INFO:_display_container: 3
2024-06-20 22:31:06,499:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:31:06,499:INFO:create_model() successfully completed......................................
2024-06-20 22:31:06,563:INFO:SubProcess create_model() end ==================================
2024-06-20 22:31:06,564:INFO:choose_better activated
2024-06-20 22:31:06,567:INFO:SubProcess create_model() called ==================================
2024-06-20 22:31:06,568:INFO:Initializing create_model()
2024-06-20 22:31:06,568:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 22:31:06,568:INFO:Checking exceptions
2024-06-20 22:31:06,570:INFO:Importing libraries
2024-06-20 22:31:06,571:INFO:Copying training dataset
2024-06-20 22:31:06,577:INFO:Defining folds
2024-06-20 22:31:06,577:INFO:Declaring metric variables
2024-06-20 22:31:06,577:INFO:Importing untrained model
2024-06-20 22:31:06,577:INFO:Declaring custom model
2024-06-20 22:31:06,578:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 22:31:06,578:INFO:Starting cross validation
2024-06-20 22:31:06,579:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 22:31:06,996:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,000:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,000:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,002:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,005:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,006:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,007:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,012:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,012:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,016:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,022:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,024:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,030:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,031:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,035:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,036:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,038:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,041:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,046:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,056:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,062:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,273:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,273:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,276:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,279:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,279:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:07,285:INFO:Calculating mean and std
2024-06-20 22:31:07,286:INFO:Creating metrics dataframe
2024-06-20 22:31:07,287:INFO:Finalizing model
2024-06-20 22:31:07,500:INFO:Uploading results into container
2024-06-20 22:31:07,501:INFO:Uploading model into container now
2024-06-20 22:31:07,501:INFO:_master_model_container: 16
2024-06-20 22:31:07,501:INFO:_display_container: 4
2024-06-20 22:31:07,502:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:31:07,502:INFO:create_model() successfully completed......................................
2024-06-20 22:31:07,563:INFO:SubProcess create_model() end ==================================
2024-06-20 22:31:07,563:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=7091, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) result for Accuracy is 0.8065
2024-06-20 22:31:07,564:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) result for Accuracy is 0.8145
2024-06-20 22:31:07,564:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False) is best model
2024-06-20 22:31:07,564:INFO:choose_better completed
2024-06-20 22:31:07,574:INFO:_master_model_container: 16
2024-06-20 22:31:07,575:INFO:_display_container: 3
2024-06-20 22:31:07,575:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 22:31:07,576:INFO:tune_model() successfully completed......................................
2024-06-20 22:31:07,662:INFO:Initializing plot_model()
2024-06-20 22:31:07,662:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, system=True)
2024-06-20 22:31:07,662:INFO:Checking exceptions
2024-06-20 22:31:07,669:INFO:Preloading libraries
2024-06-20 22:31:07,688:INFO:Copying training dataset
2024-06-20 22:31:07,688:INFO:Plot type: auc
2024-06-20 22:31:07,892:INFO:Fitting Model
2024-06-20 22:31:07,893:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2024-06-20 22:31:07,894:INFO:Scoring test/hold-out set
2024-06-20 22:31:08,148:INFO:Visual Rendered Successfully
2024-06-20 22:31:08,210:INFO:plot_model() successfully completed......................................
2024-06-20 22:31:08,212:INFO:Initializing plot_model()
2024-06-20 22:31:08,212:INFO:plot_model(plot=confusion_matrix, fold=None, verbose=True, display=None, display_format=None, estimator=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, system=True)
2024-06-20 22:31:08,212:INFO:Checking exceptions
2024-06-20 22:31:08,225:INFO:Preloading libraries
2024-06-20 22:31:08,242:INFO:Copying training dataset
2024-06-20 22:31:08,243:INFO:Plot type: confusion_matrix
2024-06-20 22:31:08,451:INFO:Fitting Model
2024-06-20 22:31:08,452:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\base.py:493: UserWarning: X does not have valid feature names, but GradientBoostingClassifier was fitted with feature names
  warnings.warn(

2024-06-20 22:31:08,452:INFO:Scoring test/hold-out set
2024-06-20 22:31:08,596:INFO:Visual Rendered Successfully
2024-06-20 22:31:08,662:INFO:plot_model() successfully completed......................................
2024-06-20 22:31:08,679:INFO:Initializing save_model()
2024-06-20 22:31:08,679:INFO:save_model(model=GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=10,
                           max_features='sqrt', max_leaf_nodes=None,
                           min_impurity_decrease=0.5, min_samples_leaf=1,
                           min_samples_split=7, min_weight_fraction_leaf=0.0,
                           n_estimators=190, n_iter_no_change=None,
                           random_state=7091, subsample=0.75, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-06-20 22:31:08,679:INFO:Adding model into prep_pipe
2024-06-20 22:31:08,693:INFO:best_model.pkl saved in current working directory
2024-06-20 22:31:08,711:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=10, max_features='sqrt',
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.5,
                                            min_samples_leaf=1,
                                            min_samples_split=7,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=190,
                                            n_iter_no_change=None,
                                            random_state=7091, subsample=0.75,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False)
2024-06-20 22:31:08,711:INFO:save_model() successfully completed......................................
2024-06-20 22:31:08,813:INFO:Initializing load_model()
2024-06-20 22:31:08,813:INFO:load_model(model_name=best_model, platform=None, authentication=None, verbose=True)
2024-06-20 22:31:08,851:INFO:Initializing predict_model()
2024-06-20 22:31:08,851:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001C8DFE7F790>, estimator=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                            criterion='friedman_mse', init=None,
                                            learning_rate=0.1, loss='log_loss',
                                            max_depth=10, max_features='sqrt',
                                            max_leaf_nodes=None,
                                            min_impurity_decrease=0.5,
                                            min_samples_leaf=1,
                                            min_samples_split=7,
                                            min_weight_fraction_leaf=0.0,
                                            n_estimators=190,
                                            n_iter_no_change=None,
                                            random_state=7091, subsample=0.75,
                                            tol=0.0001, validation_fraction=0.1,
                                            verbose=0, warm_start=False))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001C883C5EA70>)
2024-06-20 22:31:08,851:INFO:Checking exceptions
2024-06-20 22:31:08,852:INFO:Preloading libraries
2024-06-20 22:31:08,854:INFO:Set up data.
2024-06-20 22:31:08,862:INFO:Set up index.
2024-06-20 22:31:08,897:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:08,904:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 22:31:08,912:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:25:03,489:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-06-20 23:26:26,509:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-06-20 23:26:29,792:ERROR:
'fastapi' is a soft dependency and not included in the pycaret installation. Please run: `pip install fastapi` to install.
Alternately, you can install this by running `pip install pycaret[mlops]`
NoneType: None
2024-06-20 23:26:39,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:26:39,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:26:39,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:26:39,433:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:26:44,136:INFO:PyCaret ClassificationExperiment
2024-06-20 23:26:44,136:INFO:Logging name: clf-default-name
2024-06-20 23:26:44,136:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-20 23:26:44,136:INFO:version 3.3.2
2024-06-20 23:26:44,136:INFO:Initializing setup()
2024-06-20 23:26:44,136:INFO:self.USI: 343f
2024-06-20 23:26:44,136:INFO:self._variable_keys: {'memory', 'gpu_n_jobs_param', 'fix_imbalance', 'exp_id', 'X_test', 'fold_generator', 'pipeline', 'n_jobs_param', 'y_test', 'is_multiclass', '_available_plots', 'exp_name_log', 'X', 'target_param', 'logging_param', 'gpu_param', 'data', 'seed', 'fold_shuffle_param', 'y_train', 'fold_groups_param', 'USI', 'idx', 'log_plots_param', 'X_train', '_ml_usecase', 'y', 'html_param'}
2024-06-20 23:26:44,136:INFO:Checking environment
2024-06-20 23:26:44,136:INFO:python_version: 3.10.14
2024-06-20 23:26:44,136:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-20 23:26:44,136:INFO:machine: AMD64
2024-06-20 23:26:44,136:INFO:platform: Windows-10-10.0.19045-SP0
2024-06-20 23:26:44,141:INFO:Memory: svmem(total=17089769472, available=6334853120, percent=62.9, used=10754916352, free=6334853120)
2024-06-20 23:26:44,142:INFO:Physical Core: 4
2024-06-20 23:26:44,142:INFO:Logical Core: 8
2024-06-20 23:26:44,142:INFO:Checking libraries
2024-06-20 23:26:44,142:INFO:System:
2024-06-20 23:26:44,142:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-20 23:26:44,142:INFO:executable: c:\Users\ypd04\miniconda3\envs\mlops\python.exe
2024-06-20 23:26:44,142:INFO:   machine: Windows-10-10.0.19045-SP0
2024-06-20 23:26:44,142:INFO:PyCaret required dependencies:
2024-06-20 23:26:44,186:INFO:                 pip: 24.0
2024-06-20 23:26:44,186:INFO:          setuptools: 69.5.1
2024-06-20 23:26:44,187:INFO:             pycaret: 3.3.2
2024-06-20 23:26:44,187:INFO:             IPython: 8.25.0
2024-06-20 23:26:44,187:INFO:          ipywidgets: 8.1.3
2024-06-20 23:26:44,187:INFO:                tqdm: 4.66.4
2024-06-20 23:26:44,187:INFO:               numpy: 1.26.4
2024-06-20 23:26:44,188:INFO:              pandas: 2.1.4
2024-06-20 23:26:44,188:INFO:              jinja2: 3.1.4
2024-06-20 23:26:44,188:INFO:               scipy: 1.11.4
2024-06-20 23:26:44,188:INFO:              joblib: 1.3.2
2024-06-20 23:26:44,188:INFO:             sklearn: 1.4.2
2024-06-20 23:26:44,188:INFO:                pyod: 2.0.0
2024-06-20 23:26:44,188:INFO:            imblearn: 0.12.3
2024-06-20 23:26:44,188:INFO:   category_encoders: 2.6.3
2024-06-20 23:26:44,188:INFO:            lightgbm: 4.4.0
2024-06-20 23:26:44,189:INFO:               numba: 0.60.0
2024-06-20 23:26:44,189:INFO:            requests: 2.32.3
2024-06-20 23:26:44,189:INFO:          matplotlib: 3.7.5
2024-06-20 23:26:44,189:INFO:          scikitplot: 0.3.7
2024-06-20 23:26:44,189:INFO:         yellowbrick: 1.5
2024-06-20 23:26:44,189:INFO:              plotly: 5.22.0
2024-06-20 23:26:44,189:INFO:    plotly-resampler: Not installed
2024-06-20 23:26:44,189:INFO:             kaleido: 0.2.1
2024-06-20 23:26:44,189:INFO:           schemdraw: 0.15
2024-06-20 23:26:44,189:INFO:         statsmodels: 0.14.2
2024-06-20 23:26:44,189:INFO:              sktime: 0.26.0
2024-06-20 23:26:44,189:INFO:               tbats: 1.1.3
2024-06-20 23:26:44,190:INFO:            pmdarima: 2.0.4
2024-06-20 23:26:44,190:INFO:              psutil: 6.0.0
2024-06-20 23:26:44,190:INFO:          markupsafe: 2.1.5
2024-06-20 23:26:44,190:INFO:             pickle5: Not installed
2024-06-20 23:26:44,190:INFO:         cloudpickle: 3.0.0
2024-06-20 23:26:44,190:INFO:         deprecation: 2.1.0
2024-06-20 23:26:44,190:INFO:              xxhash: 3.4.1
2024-06-20 23:26:44,190:INFO:           wurlitzer: Not installed
2024-06-20 23:26:44,190:INFO:PyCaret optional dependencies:
2024-06-20 23:26:49,166:INFO:                shap: Not installed
2024-06-20 23:26:49,166:INFO:           interpret: Not installed
2024-06-20 23:26:49,166:INFO:                umap: Not installed
2024-06-20 23:26:49,166:INFO:     ydata_profiling: Not installed
2024-06-20 23:26:49,166:INFO:  explainerdashboard: Not installed
2024-06-20 23:26:49,166:INFO:             autoviz: Not installed
2024-06-20 23:26:49,166:INFO:           fairlearn: Not installed
2024-06-20 23:26:49,166:INFO:          deepchecks: Not installed
2024-06-20 23:26:49,166:INFO:             xgboost: Not installed
2024-06-20 23:26:49,166:INFO:            catboost: Not installed
2024-06-20 23:26:49,166:INFO:              kmodes: Not installed
2024-06-20 23:26:49,167:INFO:             mlxtend: Not installed
2024-06-20 23:26:49,167:INFO:       statsforecast: Not installed
2024-06-20 23:26:49,167:INFO:        tune_sklearn: Not installed
2024-06-20 23:26:49,167:INFO:                 ray: Not installed
2024-06-20 23:26:49,167:INFO:            hyperopt: Not installed
2024-06-20 23:26:49,167:INFO:              optuna: Not installed
2024-06-20 23:26:49,167:INFO:               skopt: Not installed
2024-06-20 23:26:49,167:INFO:              mlflow: 2.14.1
2024-06-20 23:26:49,167:INFO:              gradio: 4.36.1
2024-06-20 23:26:49,167:INFO:             fastapi: 0.111.0
2024-06-20 23:26:49,167:INFO:             uvicorn: 0.30.1
2024-06-20 23:26:49,167:INFO:              m2cgen: 0.10.0
2024-06-20 23:26:49,167:INFO:           evidently: 0.4.28
2024-06-20 23:26:49,167:INFO:               fugue: Not installed
2024-06-20 23:26:49,167:INFO:           streamlit: Not installed
2024-06-20 23:26:49,167:INFO:             prophet: Not installed
2024-06-20 23:26:49,167:INFO:None
2024-06-20 23:26:49,168:INFO:Set up data.
2024-06-20 23:26:49,176:INFO:Set up folding strategy.
2024-06-20 23:26:49,176:INFO:Set up train/test split.
2024-06-20 23:26:49,186:INFO:Set up index.
2024-06-20 23:26:49,186:INFO:Assigning column types.
2024-06-20 23:26:49,194:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-20 23:26:49,242:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,246:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,281:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,281:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,328:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,329:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,356:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,356:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,356:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-20 23:26:49,404:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,432:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,432:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,477:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:26:49,504:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,505:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,505:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-20 23:26:49,579:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,579:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,652:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,652:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:49,655:INFO:Preparing preprocessing pipeline...
2024-06-20 23:26:49,656:INFO:Set up label encoding.
2024-06-20 23:26:49,656:INFO:Set up simple imputation.
2024-06-20 23:26:49,659:INFO:Set up encoding of ordinal features.
2024-06-20 23:26:49,662:INFO:Set up encoding of categorical features.
2024-06-20 23:26:49,729:INFO:Finished creating preprocessing pipeline.
2024-06-20 23:26:49,748:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-06-20 23:26:49,748:INFO:Creating final display dataframe.
2024-06-20 23:26:49,966:INFO:Setup _display_container:                     Description             Value
0                    Session id              6185
1                        Target          Purchase
2                   Target type            Binary
3                Target mapping      CH: 0, MM: 1
4           Original data shape        (1070, 19)
5        Transformed data shape        (1070, 19)
6   Transformed train set shape         (749, 19)
7    Transformed test set shape         (321, 19)
8              Numeric features                17
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              343f
2024-06-20 23:26:50,045:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:50,046:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:50,113:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:50,113:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:26:50,115:INFO:setup() successfully completed in 5.98s...............
2024-06-20 23:26:50,153:INFO:Initializing compare_models()
2024-06-20 23:26:50,154:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-06-20 23:26:50,154:INFO:Checking exceptions
2024-06-20 23:26:50,161:INFO:Preparing display monitor
2024-06-20 23:26:50,200:INFO:Initializing Logistic Regression
2024-06-20 23:26:50,203:INFO:Total runtime is 5.002816518147787e-05 minutes
2024-06-20 23:26:50,209:INFO:SubProcess create_model() called ==================================
2024-06-20 23:26:50,210:INFO:Initializing create_model()
2024-06-20 23:26:50,210:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:26:50,210:INFO:Checking exceptions
2024-06-20 23:26:50,210:INFO:Importing libraries
2024-06-20 23:26:50,211:INFO:Copying training dataset
2024-06-20 23:26:50,222:INFO:Defining folds
2024-06-20 23:26:50,222:INFO:Declaring metric variables
2024-06-20 23:26:50,228:INFO:Importing untrained model
2024-06-20 23:26:50,234:INFO:Logistic Regression Imported successfully
2024-06-20 23:26:50,243:INFO:Starting cross validation
2024-06-20 23:26:50,244:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:26:58,259:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,271:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,285:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,288:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,300:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,305:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,306:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,310:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,311:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,313:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,320:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,328:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,334:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,336:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,340:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,342:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,343:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,348:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,352:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,353:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,354:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,356:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,361:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,362:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,365:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,369:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,370:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,371:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,371:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,377:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,378:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,384:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,676:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:26:58,695:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,701:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,710:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,718:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:58,729:INFO:Calculating mean and std
2024-06-20 23:26:58,730:INFO:Creating metrics dataframe
2024-06-20 23:26:58,733:INFO:Uploading results into container
2024-06-20 23:26:58,735:INFO:Uploading model into container now
2024-06-20 23:26:58,735:INFO:_master_model_container: 1
2024-06-20 23:26:58,735:INFO:_display_container: 2
2024-06-20 23:26:58,736:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=6185, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-20 23:26:58,737:INFO:create_model() successfully completed......................................
2024-06-20 23:26:58,851:INFO:SubProcess create_model() end ==================================
2024-06-20 23:26:58,852:INFO:Creating metrics dataframe
2024-06-20 23:26:58,859:INFO:Initializing K Neighbors Classifier
2024-06-20 23:26:58,860:INFO:Total runtime is 0.14433334668477377 minutes
2024-06-20 23:26:58,864:INFO:SubProcess create_model() called ==================================
2024-06-20 23:26:58,865:INFO:Initializing create_model()
2024-06-20 23:26:58,865:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:26:58,865:INFO:Checking exceptions
2024-06-20 23:26:58,866:INFO:Importing libraries
2024-06-20 23:26:58,866:INFO:Copying training dataset
2024-06-20 23:26:58,875:INFO:Defining folds
2024-06-20 23:26:58,875:INFO:Declaring metric variables
2024-06-20 23:26:58,882:INFO:Importing untrained model
2024-06-20 23:26:58,888:INFO:K Neighbors Classifier Imported successfully
2024-06-20 23:26:58,899:INFO:Starting cross validation
2024-06-20 23:26:58,901:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:26:59,305:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,307:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,309:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,312:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,313:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,316:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,318:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,319:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,323:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,324:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,327:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,327:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,329:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,332:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,333:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,336:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,340:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,342:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,347:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,353:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,357:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,358:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,363:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,368:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,419:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,419:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,422:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,422:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,426:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,427:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,440:INFO:Calculating mean and std
2024-06-20 23:26:59,441:INFO:Creating metrics dataframe
2024-06-20 23:26:59,443:INFO:Uploading results into container
2024-06-20 23:26:59,444:INFO:Uploading model into container now
2024-06-20 23:26:59,444:INFO:_master_model_container: 2
2024-06-20 23:26:59,445:INFO:_display_container: 2
2024-06-20 23:26:59,445:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-06-20 23:26:59,445:INFO:create_model() successfully completed......................................
2024-06-20 23:26:59,537:INFO:SubProcess create_model() end ==================================
2024-06-20 23:26:59,537:INFO:Creating metrics dataframe
2024-06-20 23:26:59,545:INFO:Initializing Naive Bayes
2024-06-20 23:26:59,545:INFO:Total runtime is 0.1557499607404073 minutes
2024-06-20 23:26:59,549:INFO:SubProcess create_model() called ==================================
2024-06-20 23:26:59,549:INFO:Initializing create_model()
2024-06-20 23:26:59,549:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:26:59,550:INFO:Checking exceptions
2024-06-20 23:26:59,550:INFO:Importing libraries
2024-06-20 23:26:59,550:INFO:Copying training dataset
2024-06-20 23:26:59,557:INFO:Defining folds
2024-06-20 23:26:59,558:INFO:Declaring metric variables
2024-06-20 23:26:59,563:INFO:Importing untrained model
2024-06-20 23:26:59,567:INFO:Naive Bayes Imported successfully
2024-06-20 23:26:59,577:INFO:Starting cross validation
2024-06-20 23:26:59,579:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:26:59,699:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,706:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,711:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,712:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,717:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,717:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,719:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,723:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,723:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,724:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,725:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,725:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,728:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,729:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,730:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,733:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,735:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,737:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,739:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,739:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,743:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,747:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,791:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,798:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,798:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:26:59,808:INFO:Calculating mean and std
2024-06-20 23:26:59,809:INFO:Creating metrics dataframe
2024-06-20 23:26:59,812:INFO:Uploading results into container
2024-06-20 23:26:59,813:INFO:Uploading model into container now
2024-06-20 23:26:59,814:INFO:_master_model_container: 3
2024-06-20 23:26:59,814:INFO:_display_container: 2
2024-06-20 23:26:59,814:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-06-20 23:26:59,814:INFO:create_model() successfully completed......................................
2024-06-20 23:26:59,912:INFO:SubProcess create_model() end ==================================
2024-06-20 23:26:59,912:INFO:Creating metrics dataframe
2024-06-20 23:26:59,923:INFO:Initializing Decision Tree Classifier
2024-06-20 23:26:59,923:INFO:Total runtime is 0.1620522697766622 minutes
2024-06-20 23:26:59,927:INFO:SubProcess create_model() called ==================================
2024-06-20 23:26:59,928:INFO:Initializing create_model()
2024-06-20 23:26:59,928:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:26:59,928:INFO:Checking exceptions
2024-06-20 23:26:59,928:INFO:Importing libraries
2024-06-20 23:26:59,928:INFO:Copying training dataset
2024-06-20 23:26:59,936:INFO:Defining folds
2024-06-20 23:26:59,936:INFO:Declaring metric variables
2024-06-20 23:26:59,941:INFO:Importing untrained model
2024-06-20 23:26:59,947:INFO:Decision Tree Classifier Imported successfully
2024-06-20 23:26:59,957:INFO:Starting cross validation
2024-06-20 23:26:59,959:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:00,086:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,092:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,097:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,101:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,104:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,104:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,105:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,107:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,109:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,110:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,111:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,114:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,116:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,116:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,117:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,119:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,122:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,132:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,132:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,138:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,138:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,143:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,198:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,201:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,202:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,204:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,207:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,212:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,221:INFO:Calculating mean and std
2024-06-20 23:27:00,222:INFO:Creating metrics dataframe
2024-06-20 23:27:00,225:INFO:Uploading results into container
2024-06-20 23:27:00,226:INFO:Uploading model into container now
2024-06-20 23:27:00,226:INFO:_master_model_container: 4
2024-06-20 23:27:00,226:INFO:_display_container: 2
2024-06-20 23:27:00,227:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=6185, splitter='best')
2024-06-20 23:27:00,227:INFO:create_model() successfully completed......................................
2024-06-20 23:27:00,330:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:00,330:INFO:Creating metrics dataframe
2024-06-20 23:27:00,338:INFO:Initializing SVM - Linear Kernel
2024-06-20 23:27:00,339:INFO:Total runtime is 0.16898566881815594 minutes
2024-06-20 23:27:00,343:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:00,344:INFO:Initializing create_model()
2024-06-20 23:27:00,344:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:00,344:INFO:Checking exceptions
2024-06-20 23:27:00,346:INFO:Importing libraries
2024-06-20 23:27:00,346:INFO:Copying training dataset
2024-06-20 23:27:00,353:INFO:Defining folds
2024-06-20 23:27:00,353:INFO:Declaring metric variables
2024-06-20 23:27:00,360:INFO:Importing untrained model
2024-06-20 23:27:00,367:INFO:SVM - Linear Kernel Imported successfully
2024-06-20 23:27:00,378:INFO:Starting cross validation
2024-06-20 23:27:00,380:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:00,519:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,524:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,529:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,531:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:00,532:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,532:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,534:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,535:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,538:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,541:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,541:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,543:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:00,544:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,547:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,548:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,548:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,551:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,553:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,554:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,560:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,561:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,563:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:00,565:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,567:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,571:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,620:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,624:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,625:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,626:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:00,629:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,629:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,632:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,651:INFO:Calculating mean and std
2024-06-20 23:27:00,652:INFO:Creating metrics dataframe
2024-06-20 23:27:00,654:INFO:Uploading results into container
2024-06-20 23:27:00,655:INFO:Uploading model into container now
2024-06-20 23:27:00,656:INFO:_master_model_container: 5
2024-06-20 23:27:00,656:INFO:_display_container: 2
2024-06-20 23:27:00,657:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=6185, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-06-20 23:27:00,657:INFO:create_model() successfully completed......................................
2024-06-20 23:27:00,755:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:00,756:INFO:Creating metrics dataframe
2024-06-20 23:27:00,763:INFO:Initializing Ridge Classifier
2024-06-20 23:27:00,763:INFO:Total runtime is 0.17605232000350954 minutes
2024-06-20 23:27:00,767:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:00,768:INFO:Initializing create_model()
2024-06-20 23:27:00,768:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:00,768:INFO:Checking exceptions
2024-06-20 23:27:00,768:INFO:Importing libraries
2024-06-20 23:27:00,768:INFO:Copying training dataset
2024-06-20 23:27:00,775:INFO:Defining folds
2024-06-20 23:27:00,775:INFO:Declaring metric variables
2024-06-20 23:27:00,779:INFO:Importing untrained model
2024-06-20 23:27:00,784:INFO:Ridge Classifier Imported successfully
2024-06-20 23:27:00,792:INFO:Starting cross validation
2024-06-20 23:27:00,794:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:00,923:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,929:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,935:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,936:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,936:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,938:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,938:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,942:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,942:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,943:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,943:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,944:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,949:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,949:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,951:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,951:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,957:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,964:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,969:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,969:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,972:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,975:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:00,981:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,029:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,033:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,040:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,044:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,064:INFO:Calculating mean and std
2024-06-20 23:27:01,065:INFO:Creating metrics dataframe
2024-06-20 23:27:01,068:INFO:Uploading results into container
2024-06-20 23:27:01,068:INFO:Uploading model into container now
2024-06-20 23:27:01,069:INFO:_master_model_container: 6
2024-06-20 23:27:01,069:INFO:_display_container: 2
2024-06-20 23:27:01,070:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:01,071:INFO:create_model() successfully completed......................................
2024-06-20 23:27:01,177:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:01,177:INFO:Creating metrics dataframe
2024-06-20 23:27:01,186:INFO:Initializing Random Forest Classifier
2024-06-20 23:27:01,187:INFO:Total runtime is 0.18311898310979208 minutes
2024-06-20 23:27:01,191:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:01,191:INFO:Initializing create_model()
2024-06-20 23:27:01,191:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:01,192:INFO:Checking exceptions
2024-06-20 23:27:01,192:INFO:Importing libraries
2024-06-20 23:27:01,192:INFO:Copying training dataset
2024-06-20 23:27:01,200:INFO:Defining folds
2024-06-20 23:27:01,200:INFO:Declaring metric variables
2024-06-20 23:27:01,204:INFO:Importing untrained model
2024-06-20 23:27:01,210:INFO:Random Forest Classifier Imported successfully
2024-06-20 23:27:01,220:INFO:Starting cross validation
2024-06-20 23:27:01,221:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:01,735:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,735:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,737:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,741:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,741:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,742:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,746:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,747:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,752:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,767:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,767:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,774:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,775:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,779:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,785:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,826:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,831:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,837:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,915:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,919:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,923:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,945:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,951:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:01,955:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,124:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,125:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,128:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,132:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,133:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,149:INFO:Calculating mean and std
2024-06-20 23:27:02,151:INFO:Creating metrics dataframe
2024-06-20 23:27:02,153:INFO:Uploading results into container
2024-06-20 23:27:02,153:INFO:Uploading model into container now
2024-06-20 23:27:02,154:INFO:_master_model_container: 7
2024-06-20 23:27:02,154:INFO:_display_container: 2
2024-06-20 23:27:02,155:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=6185, verbose=0,
                       warm_start=False)
2024-06-20 23:27:02,155:INFO:create_model() successfully completed......................................
2024-06-20 23:27:02,262:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:02,262:INFO:Creating metrics dataframe
2024-06-20 23:27:02,276:INFO:Initializing Quadratic Discriminant Analysis
2024-06-20 23:27:02,277:INFO:Total runtime is 0.20128563642501832 minutes
2024-06-20 23:27:02,283:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:02,285:INFO:Initializing create_model()
2024-06-20 23:27:02,285:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:02,285:INFO:Checking exceptions
2024-06-20 23:27:02,285:INFO:Importing libraries
2024-06-20 23:27:02,285:INFO:Copying training dataset
2024-06-20 23:27:02,295:INFO:Defining folds
2024-06-20 23:27:02,295:INFO:Declaring metric variables
2024-06-20 23:27:02,303:INFO:Importing untrained model
2024-06-20 23:27:02,309:INFO:Quadratic Discriminant Analysis Imported successfully
2024-06-20 23:27:02,318:INFO:Starting cross validation
2024-06-20 23:27:02,320:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:02,424:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,433:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,434:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,443:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,449:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,450:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,477:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,480:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,485:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,491:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,491:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,493:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,496:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,498:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,498:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,498:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,499:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,502:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,504:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,505:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,505:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,524:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,528:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,530:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,533:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,536:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,541:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,566:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:27:02,601:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,605:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,605:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,608:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,609:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:02,623:INFO:Calculating mean and std
2024-06-20 23:27:02,625:INFO:Creating metrics dataframe
2024-06-20 23:27:02,627:INFO:Uploading results into container
2024-06-20 23:27:02,628:INFO:Uploading model into container now
2024-06-20 23:27:02,628:INFO:_master_model_container: 8
2024-06-20 23:27:02,630:INFO:_display_container: 2
2024-06-20 23:27:02,630:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-06-20 23:27:02,630:INFO:create_model() successfully completed......................................
2024-06-20 23:27:02,737:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:02,737:INFO:Creating metrics dataframe
2024-06-20 23:27:02,747:INFO:Initializing Ada Boost Classifier
2024-06-20 23:27:02,747:INFO:Total runtime is 0.20911891460418702 minutes
2024-06-20 23:27:02,751:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:02,751:INFO:Initializing create_model()
2024-06-20 23:27:02,751:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:02,752:INFO:Checking exceptions
2024-06-20 23:27:02,752:INFO:Importing libraries
2024-06-20 23:27:02,752:INFO:Copying training dataset
2024-06-20 23:27:02,760:INFO:Defining folds
2024-06-20 23:27:02,761:INFO:Declaring metric variables
2024-06-20 23:27:02,765:INFO:Importing untrained model
2024-06-20 23:27:02,771:INFO:Ada Boost Classifier Imported successfully
2024-06-20 23:27:02,779:INFO:Starting cross validation
2024-06-20 23:27:02,781:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:02,857:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,862:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,870:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,874:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:02,917:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:03,120:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,122:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,124:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,125:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,132:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,134:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,134:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,135:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,136:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,140:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,141:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,145:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,147:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,147:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,153:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,159:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,168:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,174:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,175:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,180:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,180:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,184:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,191:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:03,194:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:27:03,355:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,355:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,358:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,359:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,361:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,362:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,371:INFO:Calculating mean and std
2024-06-20 23:27:03,372:INFO:Creating metrics dataframe
2024-06-20 23:27:03,374:INFO:Uploading results into container
2024-06-20 23:27:03,375:INFO:Uploading model into container now
2024-06-20 23:27:03,376:INFO:_master_model_container: 9
2024-06-20 23:27:03,377:INFO:_display_container: 2
2024-06-20 23:27:03,378:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=6185)
2024-06-20 23:27:03,378:INFO:create_model() successfully completed......................................
2024-06-20 23:27:03,485:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:03,485:INFO:Creating metrics dataframe
2024-06-20 23:27:03,498:INFO:Initializing Gradient Boosting Classifier
2024-06-20 23:27:03,498:INFO:Total runtime is 0.22163562774658205 minutes
2024-06-20 23:27:03,503:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:03,503:INFO:Initializing create_model()
2024-06-20 23:27:03,504:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:03,504:INFO:Checking exceptions
2024-06-20 23:27:03,504:INFO:Importing libraries
2024-06-20 23:27:03,504:INFO:Copying training dataset
2024-06-20 23:27:03,512:INFO:Defining folds
2024-06-20 23:27:03,512:INFO:Declaring metric variables
2024-06-20 23:27:03,519:INFO:Importing untrained model
2024-06-20 23:27:03,525:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 23:27:03,535:INFO:Starting cross validation
2024-06-20 23:27:03,537:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:03,980:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,982:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,985:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,988:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,994:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:03,997:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,000:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,003:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,008:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,010:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,010:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,014:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,017:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,018:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,018:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,020:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,024:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,024:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,024:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,030:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,033:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,038:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,042:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,284:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,287:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,290:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,290:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,293:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,294:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,305:INFO:Calculating mean and std
2024-06-20 23:27:04,306:INFO:Creating metrics dataframe
2024-06-20 23:27:04,307:INFO:Uploading results into container
2024-06-20 23:27:04,307:INFO:Uploading model into container now
2024-06-20 23:27:04,308:INFO:_master_model_container: 10
2024-06-20 23:27:04,308:INFO:_display_container: 2
2024-06-20 23:27:04,309:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=6185, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 23:27:04,309:INFO:create_model() successfully completed......................................
2024-06-20 23:27:04,412:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:04,413:INFO:Creating metrics dataframe
2024-06-20 23:27:04,424:INFO:Initializing Linear Discriminant Analysis
2024-06-20 23:27:04,424:INFO:Total runtime is 0.23706897894541423 minutes
2024-06-20 23:27:04,428:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:04,428:INFO:Initializing create_model()
2024-06-20 23:27:04,429:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:04,429:INFO:Checking exceptions
2024-06-20 23:27:04,429:INFO:Importing libraries
2024-06-20 23:27:04,429:INFO:Copying training dataset
2024-06-20 23:27:04,436:INFO:Defining folds
2024-06-20 23:27:04,436:INFO:Declaring metric variables
2024-06-20 23:27:04,440:INFO:Importing untrained model
2024-06-20 23:27:04,446:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 23:27:04,455:INFO:Starting cross validation
2024-06-20 23:27:04,457:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:04,579:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,584:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,585:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,587:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,591:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,593:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,594:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,595:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,597:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,598:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,598:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,599:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,600:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,602:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,604:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,605:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,606:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,608:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,613:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,621:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,626:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,630:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,690:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,691:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,695:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,695:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,700:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,700:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:04,715:INFO:Calculating mean and std
2024-06-20 23:27:04,716:INFO:Creating metrics dataframe
2024-06-20 23:27:04,718:INFO:Uploading results into container
2024-06-20 23:27:04,719:INFO:Uploading model into container now
2024-06-20 23:27:04,719:INFO:_master_model_container: 11
2024-06-20 23:27:04,719:INFO:_display_container: 2
2024-06-20 23:27:04,720:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 23:27:04,720:INFO:create_model() successfully completed......................................
2024-06-20 23:27:04,821:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:04,821:INFO:Creating metrics dataframe
2024-06-20 23:27:04,837:INFO:Initializing Extra Trees Classifier
2024-06-20 23:27:04,837:INFO:Total runtime is 0.24395228624343873 minutes
2024-06-20 23:27:04,840:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:04,841:INFO:Initializing create_model()
2024-06-20 23:27:04,841:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:04,841:INFO:Checking exceptions
2024-06-20 23:27:04,842:INFO:Importing libraries
2024-06-20 23:27:04,842:INFO:Copying training dataset
2024-06-20 23:27:04,850:INFO:Defining folds
2024-06-20 23:27:04,850:INFO:Declaring metric variables
2024-06-20 23:27:04,856:INFO:Importing untrained model
2024-06-20 23:27:04,860:INFO:Extra Trees Classifier Imported successfully
2024-06-20 23:27:04,870:INFO:Starting cross validation
2024-06-20 23:27:04,870:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:05,371:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,372:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,373:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,377:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,380:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,383:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,383:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,385:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,388:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,393:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,399:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,417:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,422:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,427:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,446:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,447:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,452:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,454:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,458:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,460:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,507:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,686:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,691:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,695:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,701:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,708:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:05,725:INFO:Calculating mean and std
2024-06-20 23:27:05,727:INFO:Creating metrics dataframe
2024-06-20 23:27:05,728:INFO:Uploading results into container
2024-06-20 23:27:05,729:INFO:Uploading model into container now
2024-06-20 23:27:05,729:INFO:_master_model_container: 12
2024-06-20 23:27:05,730:INFO:_display_container: 2
2024-06-20 23:27:05,730:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=6185, verbose=0,
                     warm_start=False)
2024-06-20 23:27:05,731:INFO:create_model() successfully completed......................................
2024-06-20 23:27:05,838:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:05,838:INFO:Creating metrics dataframe
2024-06-20 23:27:05,851:INFO:Initializing Light Gradient Boosting Machine
2024-06-20 23:27:05,851:INFO:Total runtime is 0.2608356952667236 minutes
2024-06-20 23:27:05,856:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:05,856:INFO:Initializing create_model()
2024-06-20 23:27:05,856:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:05,857:INFO:Checking exceptions
2024-06-20 23:27:05,857:INFO:Importing libraries
2024-06-20 23:27:05,857:INFO:Copying training dataset
2024-06-20 23:27:05,866:INFO:Defining folds
2024-06-20 23:27:05,866:INFO:Declaring metric variables
2024-06-20 23:27:05,873:INFO:Importing untrained model
2024-06-20 23:27:05,878:INFO:Light Gradient Boosting Machine Imported successfully
2024-06-20 23:27:05,889:INFO:Starting cross validation
2024-06-20 23:27:05,890:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:06,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,461:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,462:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,467:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,468:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,479:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,485:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,491:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,501:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,507:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,512:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,568:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,579:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,618:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,626:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,632:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,643:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,648:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,653:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,662:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,667:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,671:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,842:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,844:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,847:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,849:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,852:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,853:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:06,869:INFO:Calculating mean and std
2024-06-20 23:27:06,871:INFO:Creating metrics dataframe
2024-06-20 23:27:06,874:INFO:Uploading results into container
2024-06-20 23:27:06,875:INFO:Uploading model into container now
2024-06-20 23:27:06,875:INFO:_master_model_container: 13
2024-06-20 23:27:06,875:INFO:_display_container: 2
2024-06-20 23:27:06,876:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=6185, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-06-20 23:27:06,876:INFO:create_model() successfully completed......................................
2024-06-20 23:27:07,005:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:07,005:INFO:Creating metrics dataframe
2024-06-20 23:27:07,024:INFO:Initializing Dummy Classifier
2024-06-20 23:27:07,024:INFO:Total runtime is 0.28040230671564736 minutes
2024-06-20 23:27:07,030:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:07,031:INFO:Initializing create_model()
2024-06-20 23:27:07,031:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCBA5E5870>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:07,031:INFO:Checking exceptions
2024-06-20 23:27:07,032:INFO:Importing libraries
2024-06-20 23:27:07,032:INFO:Copying training dataset
2024-06-20 23:27:07,043:INFO:Defining folds
2024-06-20 23:27:07,043:INFO:Declaring metric variables
2024-06-20 23:27:07,074:INFO:Importing untrained model
2024-06-20 23:27:07,080:INFO:Dummy Classifier Imported successfully
2024-06-20 23:27:07,094:INFO:Starting cross validation
2024-06-20 23:27:07,096:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:07,236:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,237:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,243:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,243:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,246:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,246:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,248:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,249:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,250:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,251:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,252:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,255:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,255:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,255:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,257:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,258:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,261:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,264:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,267:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,267:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,269:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,269:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,269:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,274:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,274:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,275:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,279:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,282:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,331:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,332:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,335:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,336:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,337:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,338:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,339:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:27:07,342:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:07,358:INFO:Calculating mean and std
2024-06-20 23:27:07,359:INFO:Creating metrics dataframe
2024-06-20 23:27:07,361:INFO:Uploading results into container
2024-06-20 23:27:07,363:INFO:Uploading model into container now
2024-06-20 23:27:07,363:INFO:_master_model_container: 14
2024-06-20 23:27:07,363:INFO:_display_container: 2
2024-06-20 23:27:07,364:INFO:DummyClassifier(constant=None, random_state=6185, strategy='prior')
2024-06-20 23:27:07,364:INFO:create_model() successfully completed......................................
2024-06-20 23:27:07,478:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:07,478:INFO:Creating metrics dataframe
2024-06-20 23:27:07,494:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-06-20 23:27:07,506:INFO:Initializing create_model()
2024-06-20 23:27:07,506:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:07,506:INFO:Checking exceptions
2024-06-20 23:27:07,509:INFO:Importing libraries
2024-06-20 23:27:07,510:INFO:Copying training dataset
2024-06-20 23:27:07,517:INFO:Defining folds
2024-06-20 23:27:07,517:INFO:Declaring metric variables
2024-06-20 23:27:07,517:INFO:Importing untrained model
2024-06-20 23:27:07,517:INFO:Declaring custom model
2024-06-20 23:27:07,518:INFO:Ridge Classifier Imported successfully
2024-06-20 23:27:07,519:INFO:Cross validation set to False
2024-06-20 23:27:07,519:INFO:Fitting Model
2024-06-20 23:27:07,550:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:07,550:INFO:create_model() successfully completed......................................
2024-06-20 23:27:07,694:INFO:_master_model_container: 14
2024-06-20 23:27:07,694:INFO:_display_container: 2
2024-06-20 23:27:07,695:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:07,695:INFO:compare_models() successfully completed......................................
2024-06-20 23:27:07,719:INFO:Initializing tune_model()
2024-06-20 23:27:07,720:INFO:tune_model(estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>)
2024-06-20 23:27:07,722:INFO:Checking exceptions
2024-06-20 23:27:07,747:INFO:Copying training dataset
2024-06-20 23:27:07,755:INFO:Checking base model
2024-06-20 23:27:07,756:INFO:Base model : Ridge Classifier
2024-06-20 23:27:07,761:INFO:Declaring metric variables
2024-06-20 23:27:07,767:INFO:Defining Hyperparameters
2024-06-20 23:27:07,913:INFO:Tuning with n_jobs=-1
2024-06-20 23:27:07,913:INFO:Initializing RandomizedSearchCV
2024-06-20 23:27:09,393:INFO:best_params: {'actual_estimator__fit_intercept': True, 'actual_estimator__alpha': 7.08}
2024-06-20 23:27:09,394:INFO:Hyperparameter search completed
2024-06-20 23:27:09,394:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:09,395:INFO:Initializing create_model()
2024-06-20 23:27:09,395:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001DCB584EA10>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': True, 'alpha': 7.08})
2024-06-20 23:27:09,395:INFO:Checking exceptions
2024-06-20 23:27:09,395:INFO:Importing libraries
2024-06-20 23:27:09,395:INFO:Copying training dataset
2024-06-20 23:27:09,403:INFO:Defining folds
2024-06-20 23:27:09,403:INFO:Declaring metric variables
2024-06-20 23:27:09,406:INFO:Importing untrained model
2024-06-20 23:27:09,407:INFO:Declaring custom model
2024-06-20 23:27:09,411:INFO:Ridge Classifier Imported successfully
2024-06-20 23:27:09,418:INFO:Starting cross validation
2024-06-20 23:27:09,420:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:09,555:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,559:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,559:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,562:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,563:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,563:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,564:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,567:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,567:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,568:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,569:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,570:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,573:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,574:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,575:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,576:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,580:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,580:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,581:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,587:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,588:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,592:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,641:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,644:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,645:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,647:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,648:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,651:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,671:INFO:Calculating mean and std
2024-06-20 23:27:09,672:INFO:Creating metrics dataframe
2024-06-20 23:27:09,677:INFO:Finalizing model
2024-06-20 23:27:09,718:INFO:Uploading results into container
2024-06-20 23:27:09,718:INFO:Uploading model into container now
2024-06-20 23:27:09,720:INFO:_master_model_container: 15
2024-06-20 23:27:09,720:INFO:_display_container: 3
2024-06-20 23:27:09,721:INFO:RidgeClassifier(alpha=7.08, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:09,721:INFO:create_model() successfully completed......................................
2024-06-20 23:27:09,820:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:09,820:INFO:choose_better activated
2024-06-20 23:27:09,824:INFO:SubProcess create_model() called ==================================
2024-06-20 23:27:09,825:INFO:Initializing create_model()
2024-06-20 23:27:09,825:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:27:09,825:INFO:Checking exceptions
2024-06-20 23:27:09,827:INFO:Importing libraries
2024-06-20 23:27:09,827:INFO:Copying training dataset
2024-06-20 23:27:09,834:INFO:Defining folds
2024-06-20 23:27:09,834:INFO:Declaring metric variables
2024-06-20 23:27:09,834:INFO:Importing untrained model
2024-06-20 23:27:09,835:INFO:Declaring custom model
2024-06-20 23:27:09,835:INFO:Ridge Classifier Imported successfully
2024-06-20 23:27:09,835:INFO:Starting cross validation
2024-06-20 23:27:09,836:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:27:09,965:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,969:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,972:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,972:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,974:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,975:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,978:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,979:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,980:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,981:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,984:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,984:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,985:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,985:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,990:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,992:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:09,999:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,004:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,011:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,011:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,016:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,018:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,025:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,077:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,079:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,080:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,082:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,083:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,085:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:27:10,096:INFO:Calculating mean and std
2024-06-20 23:27:10,097:INFO:Creating metrics dataframe
2024-06-20 23:27:10,098:INFO:Finalizing model
2024-06-20 23:27:10,128:INFO:Uploading results into container
2024-06-20 23:27:10,129:INFO:Uploading model into container now
2024-06-20 23:27:10,129:INFO:_master_model_container: 16
2024-06-20 23:27:10,129:INFO:_display_container: 4
2024-06-20 23:27:10,130:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:10,130:INFO:create_model() successfully completed......................................
2024-06-20 23:27:10,231:INFO:SubProcess create_model() end ==================================
2024-06-20 23:27:10,231:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001) result for Accuracy is 0.8385
2024-06-20 23:27:10,232:INFO:RidgeClassifier(alpha=7.08, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001) result for Accuracy is 0.8425
2024-06-20 23:27:10,232:INFO:RidgeClassifier(alpha=7.08, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001) is best model
2024-06-20 23:27:10,232:INFO:choose_better completed
2024-06-20 23:27:10,244:INFO:_master_model_container: 16
2024-06-20 23:27:10,244:INFO:_display_container: 3
2024-06-20 23:27:10,244:INFO:RidgeClassifier(alpha=7.08, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001)
2024-06-20 23:27:10,244:INFO:tune_model() successfully completed......................................
2024-06-20 23:27:10,377:INFO:Initializing plot_model()
2024-06-20 23:27:10,377:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RidgeClassifier(alpha=7.08, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=6185, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001DC92890850>, system=True)
2024-06-20 23:27:10,377:INFO:Checking exceptions
2024-06-20 23:28:38,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:28:38,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:28:38,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:28:38,881:WARNING:
'cuml' is a soft dependency and not included in the pycaret installation. Please run: `pip install cuml` to install.
2024-06-20 23:28:43,431:INFO:PyCaret ClassificationExperiment
2024-06-20 23:28:43,431:INFO:Logging name: clf-default-name
2024-06-20 23:28:43,431:INFO:ML Usecase: MLUsecase.CLASSIFICATION
2024-06-20 23:28:43,431:INFO:version 3.3.2
2024-06-20 23:28:43,431:INFO:Initializing setup()
2024-06-20 23:28:43,432:INFO:self.USI: bf11
2024-06-20 23:28:43,432:INFO:self._variable_keys: {'html_param', 'X_test', 'gpu_n_jobs_param', '_ml_usecase', 'data', 'USI', 'fix_imbalance', 'target_param', 'fold_shuffle_param', 'is_multiclass', 'logging_param', 'memory', 'X_train', 'idx', 'fold_generator', 'n_jobs_param', 'y_test', 'exp_id', 'log_plots_param', 'fold_groups_param', 'gpu_param', 'y', 'pipeline', 'y_train', 'seed', '_available_plots', 'X', 'exp_name_log'}
2024-06-20 23:28:43,432:INFO:Checking environment
2024-06-20 23:28:43,432:INFO:python_version: 3.10.14
2024-06-20 23:28:43,432:INFO:python_build: ('main', 'May  6 2024 19:44:50')
2024-06-20 23:28:43,432:INFO:machine: AMD64
2024-06-20 23:28:43,432:INFO:platform: Windows-10-10.0.19045-SP0
2024-06-20 23:28:43,437:INFO:Memory: svmem(total=17089769472, available=6091472896, percent=64.4, used=10998296576, free=6091472896)
2024-06-20 23:28:43,438:INFO:Physical Core: 4
2024-06-20 23:28:43,438:INFO:Logical Core: 8
2024-06-20 23:28:43,438:INFO:Checking libraries
2024-06-20 23:28:43,438:INFO:System:
2024-06-20 23:28:43,438:INFO:    python: 3.10.14 | packaged by Anaconda, Inc. | (main, May  6 2024, 19:44:50) [MSC v.1916 64 bit (AMD64)]
2024-06-20 23:28:43,438:INFO:executable: c:\Users\ypd04\miniconda3\envs\mlops\python.exe
2024-06-20 23:28:43,438:INFO:   machine: Windows-10-10.0.19045-SP0
2024-06-20 23:28:43,438:INFO:PyCaret required dependencies:
2024-06-20 23:28:43,475:INFO:                 pip: 24.0
2024-06-20 23:28:43,475:INFO:          setuptools: 69.5.1
2024-06-20 23:28:43,476:INFO:             pycaret: 3.3.2
2024-06-20 23:28:43,476:INFO:             IPython: 8.25.0
2024-06-20 23:28:43,476:INFO:          ipywidgets: 8.1.3
2024-06-20 23:28:43,476:INFO:                tqdm: 4.66.4
2024-06-20 23:28:43,476:INFO:               numpy: 1.26.4
2024-06-20 23:28:43,476:INFO:              pandas: 2.1.4
2024-06-20 23:28:43,476:INFO:              jinja2: 3.1.4
2024-06-20 23:28:43,476:INFO:               scipy: 1.11.4
2024-06-20 23:28:43,476:INFO:              joblib: 1.3.2
2024-06-20 23:28:43,476:INFO:             sklearn: 1.4.2
2024-06-20 23:28:43,476:INFO:                pyod: 2.0.0
2024-06-20 23:28:43,476:INFO:            imblearn: 0.12.3
2024-06-20 23:28:43,476:INFO:   category_encoders: 2.6.3
2024-06-20 23:28:43,476:INFO:            lightgbm: 4.4.0
2024-06-20 23:28:43,476:INFO:               numba: 0.60.0
2024-06-20 23:28:43,476:INFO:            requests: 2.32.3
2024-06-20 23:28:43,476:INFO:          matplotlib: 3.7.5
2024-06-20 23:28:43,477:INFO:          scikitplot: 0.3.7
2024-06-20 23:28:43,477:INFO:         yellowbrick: 1.5
2024-06-20 23:28:43,477:INFO:              plotly: 5.22.0
2024-06-20 23:28:43,477:INFO:    plotly-resampler: Not installed
2024-06-20 23:28:43,477:INFO:             kaleido: 0.2.1
2024-06-20 23:28:43,477:INFO:           schemdraw: 0.15
2024-06-20 23:28:43,477:INFO:         statsmodels: 0.14.2
2024-06-20 23:28:43,477:INFO:              sktime: 0.26.0
2024-06-20 23:28:43,477:INFO:               tbats: 1.1.3
2024-06-20 23:28:43,477:INFO:            pmdarima: 2.0.4
2024-06-20 23:28:43,477:INFO:              psutil: 6.0.0
2024-06-20 23:28:43,477:INFO:          markupsafe: 2.1.5
2024-06-20 23:28:43,477:INFO:             pickle5: Not installed
2024-06-20 23:28:43,477:INFO:         cloudpickle: 3.0.0
2024-06-20 23:28:43,477:INFO:         deprecation: 2.1.0
2024-06-20 23:28:43,477:INFO:              xxhash: 3.4.1
2024-06-20 23:28:43,478:INFO:           wurlitzer: Not installed
2024-06-20 23:28:43,478:INFO:PyCaret optional dependencies:
2024-06-20 23:28:48,129:INFO:                shap: Not installed
2024-06-20 23:28:48,129:INFO:           interpret: Not installed
2024-06-20 23:28:48,129:INFO:                umap: Not installed
2024-06-20 23:28:48,129:INFO:     ydata_profiling: Not installed
2024-06-20 23:28:48,129:INFO:  explainerdashboard: Not installed
2024-06-20 23:28:48,129:INFO:             autoviz: Not installed
2024-06-20 23:28:48,129:INFO:           fairlearn: Not installed
2024-06-20 23:28:48,129:INFO:          deepchecks: Not installed
2024-06-20 23:28:48,129:INFO:             xgboost: Not installed
2024-06-20 23:28:48,130:INFO:            catboost: Not installed
2024-06-20 23:28:48,130:INFO:              kmodes: Not installed
2024-06-20 23:28:48,130:INFO:             mlxtend: Not installed
2024-06-20 23:28:48,130:INFO:       statsforecast: Not installed
2024-06-20 23:28:48,130:INFO:        tune_sklearn: Not installed
2024-06-20 23:28:48,130:INFO:                 ray: Not installed
2024-06-20 23:28:48,130:INFO:            hyperopt: Not installed
2024-06-20 23:28:48,130:INFO:              optuna: Not installed
2024-06-20 23:28:48,130:INFO:               skopt: Not installed
2024-06-20 23:28:48,130:INFO:              mlflow: 2.14.1
2024-06-20 23:28:48,130:INFO:              gradio: 4.36.1
2024-06-20 23:28:48,130:INFO:             fastapi: 0.111.0
2024-06-20 23:28:48,130:INFO:             uvicorn: 0.30.1
2024-06-20 23:28:48,130:INFO:              m2cgen: 0.10.0
2024-06-20 23:28:48,130:INFO:           evidently: 0.4.28
2024-06-20 23:28:48,130:INFO:               fugue: Not installed
2024-06-20 23:28:48,130:INFO:           streamlit: Not installed
2024-06-20 23:28:48,131:INFO:             prophet: Not installed
2024-06-20 23:28:48,131:INFO:None
2024-06-20 23:28:48,131:INFO:Set up data.
2024-06-20 23:28:48,140:INFO:Set up folding strategy.
2024-06-20 23:28:48,140:INFO:Set up train/test split.
2024-06-20 23:28:48,150:INFO:Set up index.
2024-06-20 23:28:48,150:INFO:Assigning column types.
2024-06-20 23:28:48,155:INFO:Engine successfully changes for model 'lr' to 'sklearn'.
2024-06-20 23:28:48,200:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,204:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,240:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,240:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,285:INFO:Engine for model 'knn' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,286:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,315:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,315:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,315:INFO:Engine successfully changes for model 'knn' to 'sklearn'.
2024-06-20 23:28:48,360:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,389:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,389:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,434:INFO:Engine for model 'rbfsvm' has not been set explicitly, hence returning None.
2024-06-20 23:28:48,461:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,462:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,462:INFO:Engine successfully changes for model 'rbfsvm' to 'sklearn'.
2024-06-20 23:28:48,535:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,536:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,610:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,610:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,612:INFO:Preparing preprocessing pipeline...
2024-06-20 23:28:48,613:INFO:Set up label encoding.
2024-06-20 23:28:48,613:INFO:Set up simple imputation.
2024-06-20 23:28:48,617:INFO:Set up encoding of ordinal features.
2024-06-20 23:28:48,618:INFO:Set up encoding of categorical features.
2024-06-20 23:28:48,677:INFO:Finished creating preprocessing pipeline.
2024-06-20 23:28:48,694:INFO:Pipeline: Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False)
2024-06-20 23:28:48,694:INFO:Creating final display dataframe.
2024-06-20 23:28:48,887:INFO:Setup _display_container:                     Description             Value
0                    Session id               614
1                        Target          Purchase
2                   Target type            Binary
3                Target mapping      CH: 0, MM: 1
4           Original data shape        (1070, 19)
5        Transformed data shape        (1070, 19)
6   Transformed train set shape         (749, 19)
7    Transformed test set shape         (321, 19)
8              Numeric features                17
9          Categorical features                 1
10                   Preprocess              True
11              Imputation type            simple
12           Numeric imputation              mean
13       Categorical imputation              mode
14     Maximum one-hot encoding                25
15              Encoding method              None
16               Fold Generator   StratifiedKFold
17                  Fold Number                10
18                     CPU Jobs                -1
19                      Use GPU             False
20               Log Experiment             False
21              Experiment Name  clf-default-name
22                          USI              bf11
2024-06-20 23:28:48,969:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:48,969:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:49,043:WARNING:
'xgboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install xgboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:49,044:WARNING:
'catboost' is a soft dependency and not included in the pycaret installation. Please run: `pip install catboost` to install.
Alternately, you can install this by running `pip install pycaret[models]`
2024-06-20 23:28:49,045:INFO:setup() successfully completed in 5.62s...............
2024-06-20 23:28:49,066:INFO:Initializing compare_models()
2024-06-20 23:28:49,066:INFO:compare_models(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, include=None, fold=None, round=4, cross_validation=True, sort=Accuracy, n_select=1, budget_time=None, turbo=True, errors=ignore, fit_kwargs=None, groups=None, experiment_custom_tags=None, probability_threshold=None, verbose=True, parallel=None, caller_params={'self': <pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, 'include': None, 'exclude': None, 'fold': None, 'round': 4, 'cross_validation': True, 'sort': 'Accuracy', 'n_select': 1, 'budget_time': None, 'turbo': True, 'errors': 'ignore', 'fit_kwargs': None, 'groups': None, 'experiment_custom_tags': None, 'probability_threshold': None, 'engine': None, 'verbose': True, 'parallel': None, '__class__': <class 'pycaret.classification.oop.ClassificationExperiment'>}, exclude=None)
2024-06-20 23:28:49,066:INFO:Checking exceptions
2024-06-20 23:28:49,074:INFO:Preparing display monitor
2024-06-20 23:28:49,114:INFO:Initializing Logistic Regression
2024-06-20 23:28:49,114:INFO:Total runtime is 0.0 minutes
2024-06-20 23:28:49,120:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:49,120:INFO:Initializing create_model()
2024-06-20 23:28:49,120:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=lr, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:49,120:INFO:Checking exceptions
2024-06-20 23:28:49,121:INFO:Importing libraries
2024-06-20 23:28:49,121:INFO:Copying training dataset
2024-06-20 23:28:49,130:INFO:Defining folds
2024-06-20 23:28:49,130:INFO:Declaring metric variables
2024-06-20 23:28:49,134:INFO:Importing untrained model
2024-06-20 23:28:49,138:INFO:Logistic Regression Imported successfully
2024-06-20 23:28:49,147:INFO:Starting cross validation
2024-06-20 23:28:49,149:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:56,446:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,515:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,529:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,552:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,607:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,616:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,628:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,656:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,683:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,697:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,704:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,716:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,723:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,727:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,729:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,742:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,748:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,751:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,754:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,759:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,767:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,769:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,775:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,780:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,781:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,793:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,802:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,809:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,840:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,846:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,852:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,932:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:56,957:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,960:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,964:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:56,987:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\linear_model\_logistic.py:469: ConvergenceWarning: lbfgs failed to converge (status=1):
STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.

Increase the number of iterations (max_iter) or scale the data as shown in:
    https://scikit-learn.org/stable/modules/preprocessing.html
Please also refer to the documentation for alternative solver options:
    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression
  n_iter_i = _check_optimize_result(

2024-06-20 23:28:57,012:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,015:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,018:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,028:INFO:Calculating mean and std
2024-06-20 23:28:57,029:INFO:Creating metrics dataframe
2024-06-20 23:28:57,031:INFO:Uploading results into container
2024-06-20 23:28:57,032:INFO:Uploading model into container now
2024-06-20 23:28:57,033:INFO:_master_model_container: 1
2024-06-20 23:28:57,033:INFO:_display_container: 2
2024-06-20 23:28:57,034:INFO:LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
                   intercept_scaling=1, l1_ratio=None, max_iter=1000,
                   multi_class='auto', n_jobs=None, penalty='l2',
                   random_state=614, solver='lbfgs', tol=0.0001, verbose=0,
                   warm_start=False)
2024-06-20 23:28:57,034:INFO:create_model() successfully completed......................................
2024-06-20 23:28:57,133:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:57,133:INFO:Creating metrics dataframe
2024-06-20 23:28:57,141:INFO:Initializing K Neighbors Classifier
2024-06-20 23:28:57,141:INFO:Total runtime is 0.13378334045410156 minutes
2024-06-20 23:28:57,145:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:57,145:INFO:Initializing create_model()
2024-06-20 23:28:57,146:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=knn, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:57,146:INFO:Checking exceptions
2024-06-20 23:28:57,146:INFO:Importing libraries
2024-06-20 23:28:57,146:INFO:Copying training dataset
2024-06-20 23:28:57,153:INFO:Defining folds
2024-06-20 23:28:57,154:INFO:Declaring metric variables
2024-06-20 23:28:57,159:INFO:Importing untrained model
2024-06-20 23:28:57,165:INFO:K Neighbors Classifier Imported successfully
2024-06-20 23:28:57,175:INFO:Starting cross validation
2024-06-20 23:28:57,177:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:57,497:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,499:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,504:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,505:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,509:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,510:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,513:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,515:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,517:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,518:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,521:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,525:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,529:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,531:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,532:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,536:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,538:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,540:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,542:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,544:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,546:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,547:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,551:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,626:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,627:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,630:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,631:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,634:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,650:INFO:Calculating mean and std
2024-06-20 23:28:57,652:INFO:Creating metrics dataframe
2024-06-20 23:28:57,655:INFO:Uploading results into container
2024-06-20 23:28:57,656:INFO:Uploading model into container now
2024-06-20 23:28:57,657:INFO:_master_model_container: 2
2024-06-20 23:28:57,657:INFO:_display_container: 2
2024-06-20 23:28:57,657:INFO:KNeighborsClassifier(algorithm='auto', leaf_size=30, metric='minkowski',
                     metric_params=None, n_jobs=-1, n_neighbors=5, p=2,
                     weights='uniform')
2024-06-20 23:28:57,657:INFO:create_model() successfully completed......................................
2024-06-20 23:28:57,749:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:57,749:INFO:Creating metrics dataframe
2024-06-20 23:28:57,756:INFO:Initializing Naive Bayes
2024-06-20 23:28:57,757:INFO:Total runtime is 0.14405001799265543 minutes
2024-06-20 23:28:57,760:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:57,760:INFO:Initializing create_model()
2024-06-20 23:28:57,760:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=nb, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:57,761:INFO:Checking exceptions
2024-06-20 23:28:57,761:INFO:Importing libraries
2024-06-20 23:28:57,761:INFO:Copying training dataset
2024-06-20 23:28:57,768:INFO:Defining folds
2024-06-20 23:28:57,768:INFO:Declaring metric variables
2024-06-20 23:28:57,772:INFO:Importing untrained model
2024-06-20 23:28:57,777:INFO:Naive Bayes Imported successfully
2024-06-20 23:28:57,786:INFO:Starting cross validation
2024-06-20 23:28:57,788:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:57,930:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,944:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,950:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,963:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,975:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,976:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,978:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,979:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,980:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,981:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,982:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,982:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,987:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,988:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,990:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,994:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,994:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,995:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:57,995:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,000:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,003:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,023:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,026:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,029:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,050:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,055:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,060:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,075:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,081:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,086:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,106:INFO:Calculating mean and std
2024-06-20 23:28:58,108:INFO:Creating metrics dataframe
2024-06-20 23:28:58,111:INFO:Uploading results into container
2024-06-20 23:28:58,112:INFO:Uploading model into container now
2024-06-20 23:28:58,113:INFO:_master_model_container: 3
2024-06-20 23:28:58,113:INFO:_display_container: 2
2024-06-20 23:28:58,114:INFO:GaussianNB(priors=None, var_smoothing=1e-09)
2024-06-20 23:28:58,114:INFO:create_model() successfully completed......................................
2024-06-20 23:28:58,205:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:58,205:INFO:Creating metrics dataframe
2024-06-20 23:28:58,213:INFO:Initializing Decision Tree Classifier
2024-06-20 23:28:58,213:INFO:Total runtime is 0.15165000756581623 minutes
2024-06-20 23:28:58,216:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:58,217:INFO:Initializing create_model()
2024-06-20 23:28:58,217:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=dt, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:58,218:INFO:Checking exceptions
2024-06-20 23:28:58,218:INFO:Importing libraries
2024-06-20 23:28:58,218:INFO:Copying training dataset
2024-06-20 23:28:58,225:INFO:Defining folds
2024-06-20 23:28:58,225:INFO:Declaring metric variables
2024-06-20 23:28:58,230:INFO:Importing untrained model
2024-06-20 23:28:58,235:INFO:Decision Tree Classifier Imported successfully
2024-06-20 23:28:58,244:INFO:Starting cross validation
2024-06-20 23:28:58,245:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:58,372:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,377:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,379:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,383:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,385:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,385:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,388:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,389:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,389:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,391:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,392:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,394:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,395:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,396:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,398:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,399:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,402:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,404:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,407:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,413:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,413:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,418:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,418:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,424:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,465:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,468:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,473:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,473:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,477:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,480:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,486:INFO:Calculating mean and std
2024-06-20 23:28:58,487:INFO:Creating metrics dataframe
2024-06-20 23:28:58,489:INFO:Uploading results into container
2024-06-20 23:28:58,490:INFO:Uploading model into container now
2024-06-20 23:28:58,490:INFO:_master_model_container: 4
2024-06-20 23:28:58,491:INFO:_display_container: 2
2024-06-20 23:28:58,491:INFO:DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',
                       max_depth=None, max_features=None, max_leaf_nodes=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, random_state=614, splitter='best')
2024-06-20 23:28:58,491:INFO:create_model() successfully completed......................................
2024-06-20 23:28:58,626:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:58,626:INFO:Creating metrics dataframe
2024-06-20 23:28:58,639:INFO:Initializing SVM - Linear Kernel
2024-06-20 23:28:58,639:INFO:Total runtime is 0.1587500214576721 minutes
2024-06-20 23:28:58,643:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:58,644:INFO:Initializing create_model()
2024-06-20 23:28:58,644:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=svm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:58,644:INFO:Checking exceptions
2024-06-20 23:28:58,644:INFO:Importing libraries
2024-06-20 23:28:58,645:INFO:Copying training dataset
2024-06-20 23:28:58,652:INFO:Defining folds
2024-06-20 23:28:58,653:INFO:Declaring metric variables
2024-06-20 23:28:58,656:INFO:Importing untrained model
2024-06-20 23:28:58,662:INFO:SVM - Linear Kernel Imported successfully
2024-06-20 23:28:58,671:INFO:Starting cross validation
2024-06-20 23:28:58,672:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:58,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,802:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,814:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,820:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:28:58,824:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,836:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,807:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,841:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,844:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,847:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:28:58,847:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,849:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,849:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,853:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,854:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,854:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,857:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:28:58,859:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,860:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,860:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,860:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,866:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,866:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,869:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:28:58,873:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,878:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,931:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,934:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,936:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:28:58,938:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,940:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,943:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,947:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:58,959:INFO:Calculating mean and std
2024-06-20 23:28:58,960:INFO:Creating metrics dataframe
2024-06-20 23:28:58,962:INFO:Uploading results into container
2024-06-20 23:28:58,963:INFO:Uploading model into container now
2024-06-20 23:28:58,964:INFO:_master_model_container: 5
2024-06-20 23:28:58,964:INFO:_display_container: 2
2024-06-20 23:28:58,964:INFO:SGDClassifier(alpha=0.0001, average=False, class_weight=None,
              early_stopping=False, epsilon=0.1, eta0=0.001, fit_intercept=True,
              l1_ratio=0.15, learning_rate='optimal', loss='hinge',
              max_iter=1000, n_iter_no_change=5, n_jobs=-1, penalty='l2',
              power_t=0.5, random_state=614, shuffle=True, tol=0.001,
              validation_fraction=0.1, verbose=0, warm_start=False)
2024-06-20 23:28:58,965:INFO:create_model() successfully completed......................................
2024-06-20 23:28:59,057:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:59,057:INFO:Creating metrics dataframe
2024-06-20 23:28:59,065:INFO:Initializing Ridge Classifier
2024-06-20 23:28:59,065:INFO:Total runtime is 0.165850035349528 minutes
2024-06-20 23:28:59,069:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:59,069:INFO:Initializing create_model()
2024-06-20 23:28:59,070:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=ridge, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:59,070:INFO:Checking exceptions
2024-06-20 23:28:59,070:INFO:Importing libraries
2024-06-20 23:28:59,070:INFO:Copying training dataset
2024-06-20 23:28:59,077:INFO:Defining folds
2024-06-20 23:28:59,078:INFO:Declaring metric variables
2024-06-20 23:28:59,083:INFO:Importing untrained model
2024-06-20 23:28:59,088:INFO:Ridge Classifier Imported successfully
2024-06-20 23:28:59,098:INFO:Starting cross validation
2024-06-20 23:28:59,100:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:28:59,227:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,229:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,234:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,234:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,234:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,235:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,237:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,239:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,239:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,240:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,242:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,243:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,244:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,245:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,247:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,247:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,249:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,253:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,267:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,271:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,275:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,322:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,322:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,328:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:28:59,340:INFO:Calculating mean and std
2024-06-20 23:28:59,341:INFO:Creating metrics dataframe
2024-06-20 23:28:59,343:INFO:Uploading results into container
2024-06-20 23:28:59,344:INFO:Uploading model into container now
2024-06-20 23:28:59,345:INFO:_master_model_container: 6
2024-06-20 23:28:59,345:INFO:_display_container: 2
2024-06-20 23:28:59,345:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:28:59,346:INFO:create_model() successfully completed......................................
2024-06-20 23:28:59,439:INFO:SubProcess create_model() end ==================================
2024-06-20 23:28:59,439:INFO:Creating metrics dataframe
2024-06-20 23:28:59,448:INFO:Initializing Random Forest Classifier
2024-06-20 23:28:59,448:INFO:Total runtime is 0.17223023573557536 minutes
2024-06-20 23:28:59,452:INFO:SubProcess create_model() called ==================================
2024-06-20 23:28:59,452:INFO:Initializing create_model()
2024-06-20 23:28:59,452:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=rf, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:28:59,453:INFO:Checking exceptions
2024-06-20 23:28:59,453:INFO:Importing libraries
2024-06-20 23:28:59,453:INFO:Copying training dataset
2024-06-20 23:28:59,459:INFO:Defining folds
2024-06-20 23:28:59,460:INFO:Declaring metric variables
2024-06-20 23:28:59,464:INFO:Importing untrained model
2024-06-20 23:28:59,468:INFO:Random Forest Classifier Imported successfully
2024-06-20 23:28:59,477:INFO:Starting cross validation
2024-06-20 23:28:59,479:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:00,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,042:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,060:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,065:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,066:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,066:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,068:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,068:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,074:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,074:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,080:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,080:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,083:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,088:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,094:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,214:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,218:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,222:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,395:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,395:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,399:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,402:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,420:INFO:Calculating mean and std
2024-06-20 23:29:00,421:INFO:Creating metrics dataframe
2024-06-20 23:29:00,423:INFO:Uploading results into container
2024-06-20 23:29:00,424:INFO:Uploading model into container now
2024-06-20 23:29:00,424:INFO:_master_model_container: 7
2024-06-20 23:29:00,424:INFO:_display_container: 2
2024-06-20 23:29:00,424:INFO:RandomForestClassifier(bootstrap=True, ccp_alpha=0.0, class_weight=None,
                       criterion='gini', max_depth=None, max_features='sqrt',
                       max_leaf_nodes=None, max_samples=None,
                       min_impurity_decrease=0.0, min_samples_leaf=1,
                       min_samples_split=2, min_weight_fraction_leaf=0.0,
                       monotonic_cst=None, n_estimators=100, n_jobs=-1,
                       oob_score=False, random_state=614, verbose=0,
                       warm_start=False)
2024-06-20 23:29:00,424:INFO:create_model() successfully completed......................................
2024-06-20 23:29:00,514:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:00,515:INFO:Creating metrics dataframe
2024-06-20 23:29:00,529:INFO:Initializing Quadratic Discriminant Analysis
2024-06-20 23:29:00,529:INFO:Total runtime is 0.19024538596471152 minutes
2024-06-20 23:29:00,533:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:00,533:INFO:Initializing create_model()
2024-06-20 23:29:00,534:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=qda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:00,534:INFO:Checking exceptions
2024-06-20 23:29:00,534:INFO:Importing libraries
2024-06-20 23:29:00,534:INFO:Copying training dataset
2024-06-20 23:29:00,541:INFO:Defining folds
2024-06-20 23:29:00,541:INFO:Declaring metric variables
2024-06-20 23:29:00,545:INFO:Importing untrained model
2024-06-20 23:29:00,550:INFO:Quadratic Discriminant Analysis Imported successfully
2024-06-20 23:29:00,562:INFO:Starting cross validation
2024-06-20 23:29:00,563:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:00,642:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,649:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,651:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,652:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,653:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,653:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,663:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,693:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,697:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,697:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,699:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,699:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,704:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,708:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,709:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,712:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,712:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,718:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,718:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,719:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,723:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,725:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,730:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,734:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,740:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,746:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,749:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,753:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,757:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,763:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,767:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\discriminant_analysis.py:935: UserWarning: Variables are collinear
  warnings.warn("Variables are collinear")

2024-06-20 23:29:00,790:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,796:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,801:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,805:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:00,818:INFO:Calculating mean and std
2024-06-20 23:29:00,819:INFO:Creating metrics dataframe
2024-06-20 23:29:00,821:INFO:Uploading results into container
2024-06-20 23:29:00,822:INFO:Uploading model into container now
2024-06-20 23:29:00,822:INFO:_master_model_container: 8
2024-06-20 23:29:00,822:INFO:_display_container: 2
2024-06-20 23:29:00,823:INFO:QuadraticDiscriminantAnalysis(priors=None, reg_param=0.0,
                              store_covariance=False, tol=0.0001)
2024-06-20 23:29:00,823:INFO:create_model() successfully completed......................................
2024-06-20 23:29:00,918:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:00,918:INFO:Creating metrics dataframe
2024-06-20 23:29:00,930:INFO:Initializing Ada Boost Classifier
2024-06-20 23:29:00,931:INFO:Total runtime is 0.19695326884587608 minutes
2024-06-20 23:29:00,935:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:00,936:INFO:Initializing create_model()
2024-06-20 23:29:00,936:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=ada, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:00,937:INFO:Checking exceptions
2024-06-20 23:29:00,937:INFO:Importing libraries
2024-06-20 23:29:00,937:INFO:Copying training dataset
2024-06-20 23:29:00,945:INFO:Defining folds
2024-06-20 23:29:00,945:INFO:Declaring metric variables
2024-06-20 23:29:00,951:INFO:Importing untrained model
2024-06-20 23:29:00,956:INFO:Ada Boost Classifier Imported successfully
2024-06-20 23:29:00,965:INFO:Starting cross validation
2024-06-20 23:29:00,967:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:01,045:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,054:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,057:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,059:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,062:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,082:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,083:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,091:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,290:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,296:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,302:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,303:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,308:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,308:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,311:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,314:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,314:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,319:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,319:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,321:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,327:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,329:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,331:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,333:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,335:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,336:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,339:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,342:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,343:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,345:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,349:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,361:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,367:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\ensemble\_weight_boosting.py:519: FutureWarning: The SAMME.R algorithm (the default) is deprecated and will be removed in 1.6. Use the SAMME algorithm to circumvent this warning.
  warnings.warn(

2024-06-20 23:29:01,519:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,523:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,524:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,526:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,527:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,530:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:01,537:INFO:Calculating mean and std
2024-06-20 23:29:01,538:INFO:Creating metrics dataframe
2024-06-20 23:29:01,541:INFO:Uploading results into container
2024-06-20 23:29:01,542:INFO:Uploading model into container now
2024-06-20 23:29:01,542:INFO:_master_model_container: 9
2024-06-20 23:29:01,543:INFO:_display_container: 2
2024-06-20 23:29:01,543:INFO:AdaBoostClassifier(algorithm='SAMME.R', estimator=None, learning_rate=1.0,
                   n_estimators=50, random_state=614)
2024-06-20 23:29:01,543:INFO:create_model() successfully completed......................................
2024-06-20 23:29:01,636:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:01,637:INFO:Creating metrics dataframe
2024-06-20 23:29:01,648:INFO:Initializing Gradient Boosting Classifier
2024-06-20 23:29:01,648:INFO:Total runtime is 0.20890326897303266 minutes
2024-06-20 23:29:01,653:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:01,653:INFO:Initializing create_model()
2024-06-20 23:29:01,653:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=gbc, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:01,653:INFO:Checking exceptions
2024-06-20 23:29:01,653:INFO:Importing libraries
2024-06-20 23:29:01,653:INFO:Copying training dataset
2024-06-20 23:29:01,661:INFO:Defining folds
2024-06-20 23:29:01,661:INFO:Declaring metric variables
2024-06-20 23:29:01,666:INFO:Importing untrained model
2024-06-20 23:29:01,671:INFO:Gradient Boosting Classifier Imported successfully
2024-06-20 23:29:01,680:INFO:Starting cross validation
2024-06-20 23:29:01,682:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:02,100:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,101:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,106:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,107:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,109:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,111:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,113:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,114:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,114:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,115:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,120:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,120:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,121:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,127:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,129:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,134:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,139:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,141:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,143:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,144:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,147:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,381:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,381:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,383:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,384:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,387:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,388:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,399:INFO:Calculating mean and std
2024-06-20 23:29:02,400:INFO:Creating metrics dataframe
2024-06-20 23:29:02,402:INFO:Uploading results into container
2024-06-20 23:29:02,403:INFO:Uploading model into container now
2024-06-20 23:29:02,403:INFO:_master_model_container: 10
2024-06-20 23:29:02,403:INFO:_display_container: 2
2024-06-20 23:29:02,404:INFO:GradientBoostingClassifier(ccp_alpha=0.0, criterion='friedman_mse', init=None,
                           learning_rate=0.1, loss='log_loss', max_depth=3,
                           max_features=None, max_leaf_nodes=None,
                           min_impurity_decrease=0.0, min_samples_leaf=1,
                           min_samples_split=2, min_weight_fraction_leaf=0.0,
                           n_estimators=100, n_iter_no_change=None,
                           random_state=614, subsample=1.0, tol=0.0001,
                           validation_fraction=0.1, verbose=0,
                           warm_start=False)
2024-06-20 23:29:02,404:INFO:create_model() successfully completed......................................
2024-06-20 23:29:02,493:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:02,494:INFO:Creating metrics dataframe
2024-06-20 23:29:02,503:INFO:Initializing Linear Discriminant Analysis
2024-06-20 23:29:02,503:INFO:Total runtime is 0.2231532692909241 minutes
2024-06-20 23:29:02,508:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:02,508:INFO:Initializing create_model()
2024-06-20 23:29:02,508:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=lda, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:02,508:INFO:Checking exceptions
2024-06-20 23:29:02,508:INFO:Importing libraries
2024-06-20 23:29:02,508:INFO:Copying training dataset
2024-06-20 23:29:02,515:INFO:Defining folds
2024-06-20 23:29:02,515:INFO:Declaring metric variables
2024-06-20 23:29:02,519:INFO:Importing untrained model
2024-06-20 23:29:02,524:INFO:Linear Discriminant Analysis Imported successfully
2024-06-20 23:29:02,532:INFO:Starting cross validation
2024-06-20 23:29:02,534:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:02,665:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,667:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,668:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,668:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,671:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,673:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,673:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,674:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,676:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,678:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,679:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,680:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,701:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,702:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,706:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,707:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,711:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,712:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,717:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,719:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,724:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,761:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,764:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,766:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,769:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,770:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,772:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:02,780:INFO:Calculating mean and std
2024-06-20 23:29:02,781:INFO:Creating metrics dataframe
2024-06-20 23:29:02,783:INFO:Uploading results into container
2024-06-20 23:29:02,784:INFO:Uploading model into container now
2024-06-20 23:29:02,784:INFO:_master_model_container: 11
2024-06-20 23:29:02,784:INFO:_display_container: 2
2024-06-20 23:29:02,785:INFO:LinearDiscriminantAnalysis(covariance_estimator=None, n_components=None,
                           priors=None, shrinkage=None, solver='svd',
                           store_covariance=False, tol=0.0001)
2024-06-20 23:29:02,785:INFO:create_model() successfully completed......................................
2024-06-20 23:29:02,875:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:02,876:INFO:Creating metrics dataframe
2024-06-20 23:29:02,885:INFO:Initializing Extra Trees Classifier
2024-06-20 23:29:02,885:INFO:Total runtime is 0.22951989968617761 minutes
2024-06-20 23:29:02,889:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:02,890:INFO:Initializing create_model()
2024-06-20 23:29:02,890:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=et, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:02,890:INFO:Checking exceptions
2024-06-20 23:29:02,890:INFO:Importing libraries
2024-06-20 23:29:02,890:INFO:Copying training dataset
2024-06-20 23:29:02,897:INFO:Defining folds
2024-06-20 23:29:02,897:INFO:Declaring metric variables
2024-06-20 23:29:02,902:INFO:Importing untrained model
2024-06-20 23:29:02,907:INFO:Extra Trees Classifier Imported successfully
2024-06-20 23:29:02,915:INFO:Starting cross validation
2024-06-20 23:29:02,917:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:03,332:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,338:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,343:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,345:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,351:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,360:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,362:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,364:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,367:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,368:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,369:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,373:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,373:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,374:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,379:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,451:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,455:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,456:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,459:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,462:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,480:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,484:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,488:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,628:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,631:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,634:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,643:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,647:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,650:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:03,669:INFO:Calculating mean and std
2024-06-20 23:29:03,670:INFO:Creating metrics dataframe
2024-06-20 23:29:03,673:INFO:Uploading results into container
2024-06-20 23:29:03,673:INFO:Uploading model into container now
2024-06-20 23:29:03,674:INFO:_master_model_container: 12
2024-06-20 23:29:03,674:INFO:_display_container: 2
2024-06-20 23:29:03,674:INFO:ExtraTreesClassifier(bootstrap=False, ccp_alpha=0.0, class_weight=None,
                     criterion='gini', max_depth=None, max_features='sqrt',
                     max_leaf_nodes=None, max_samples=None,
                     min_impurity_decrease=0.0, min_samples_leaf=1,
                     min_samples_split=2, min_weight_fraction_leaf=0.0,
                     monotonic_cst=None, n_estimators=100, n_jobs=-1,
                     oob_score=False, random_state=614, verbose=0,
                     warm_start=False)
2024-06-20 23:29:03,674:INFO:create_model() successfully completed......................................
2024-06-20 23:29:03,766:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:03,767:INFO:Creating metrics dataframe
2024-06-20 23:29:03,779:INFO:Initializing Light Gradient Boosting Machine
2024-06-20 23:29:03,779:INFO:Total runtime is 0.24441992839177454 minutes
2024-06-20 23:29:03,783:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:03,783:INFO:Initializing create_model()
2024-06-20 23:29:03,784:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=lightgbm, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:03,784:INFO:Checking exceptions
2024-06-20 23:29:03,784:INFO:Importing libraries
2024-06-20 23:29:03,784:INFO:Copying training dataset
2024-06-20 23:29:03,791:INFO:Defining folds
2024-06-20 23:29:03,791:INFO:Declaring metric variables
2024-06-20 23:29:03,795:INFO:Importing untrained model
2024-06-20 23:29:03,800:INFO:Light Gradient Boosting Machine Imported successfully
2024-06-20 23:29:03,810:INFO:Starting cross validation
2024-06-20 23:29:03,811:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:04,292:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,297:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,305:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,320:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,325:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,328:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,330:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,333:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,339:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,352:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,357:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,358:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,363:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,364:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,369:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,426:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,431:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,436:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,447:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,452:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,457:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,480:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,484:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,489:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,628:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,633:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,641:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,645:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,649:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,663:INFO:Calculating mean and std
2024-06-20 23:29:04,665:INFO:Creating metrics dataframe
2024-06-20 23:29:04,667:INFO:Uploading results into container
2024-06-20 23:29:04,668:INFO:Uploading model into container now
2024-06-20 23:29:04,669:INFO:_master_model_container: 13
2024-06-20 23:29:04,670:INFO:_display_container: 2
2024-06-20 23:29:04,671:INFO:LGBMClassifier(boosting_type='gbdt', class_weight=None, colsample_bytree=1.0,
               importance_type='split', learning_rate=0.1, max_depth=-1,
               min_child_samples=20, min_child_weight=0.001, min_split_gain=0.0,
               n_estimators=100, n_jobs=-1, num_leaves=31, objective=None,
               random_state=614, reg_alpha=0.0, reg_lambda=0.0, subsample=1.0,
               subsample_for_bin=200000, subsample_freq=0)
2024-06-20 23:29:04,671:INFO:create_model() successfully completed......................................
2024-06-20 23:29:04,785:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:04,785:INFO:Creating metrics dataframe
2024-06-20 23:29:04,796:INFO:Initializing Dummy Classifier
2024-06-20 23:29:04,796:INFO:Total runtime is 0.2613699118296306 minutes
2024-06-20 23:29:04,801:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:04,801:INFO:Initializing create_model()
2024-06-20 23:29:04,802:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=dummy, fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=False, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:04,802:INFO:Checking exceptions
2024-06-20 23:29:04,802:INFO:Importing libraries
2024-06-20 23:29:04,802:INFO:Copying training dataset
2024-06-20 23:29:04,809:INFO:Defining folds
2024-06-20 23:29:04,809:INFO:Declaring metric variables
2024-06-20 23:29:04,815:INFO:Importing untrained model
2024-06-20 23:29:04,820:INFO:Dummy Classifier Imported successfully
2024-06-20 23:29:04,829:INFO:Starting cross validation
2024-06-20 23:29:04,831:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:04,942:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,943:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,947:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,948:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,949:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,950:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,952:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,953:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,953:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,953:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,955:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,956:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,958:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,960:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,961:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,961:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,963:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,964:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,967:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,969:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,969:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,972:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,973:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,976:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,977:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,978:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,978:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,982:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,983:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:04,986:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:04,989:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,032:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,036:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,037:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:05,039:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,040:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,041:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1509: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.
  _warn_prf(average, modifier, f"{metric.capitalize()} is", len(result))

2024-06-20 23:29:05,043:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:05,059:INFO:Calculating mean and std
2024-06-20 23:29:05,060:INFO:Creating metrics dataframe
2024-06-20 23:29:05,062:INFO:Uploading results into container
2024-06-20 23:29:05,063:INFO:Uploading model into container now
2024-06-20 23:29:05,063:INFO:_master_model_container: 14
2024-06-20 23:29:05,063:INFO:_display_container: 2
2024-06-20 23:29:05,064:INFO:DummyClassifier(constant=None, random_state=614, strategy='prior')
2024-06-20 23:29:05,064:INFO:create_model() successfully completed......................................
2024-06-20 23:29:05,158:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:05,159:INFO:Creating metrics dataframe
2024-06-20 23:29:05,172:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\pycaret_experiment\supervised_experiment.py:323: FutureWarning: Styler.applymap has been deprecated. Use Styler.map instead.
  master_display_.apply(

2024-06-20 23:29:05,183:INFO:Initializing create_model()
2024-06-20 23:29:05,183:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=False, predict=False, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:05,183:INFO:Checking exceptions
2024-06-20 23:29:05,186:INFO:Importing libraries
2024-06-20 23:29:05,186:INFO:Copying training dataset
2024-06-20 23:29:05,193:INFO:Defining folds
2024-06-20 23:29:05,193:INFO:Declaring metric variables
2024-06-20 23:29:05,193:INFO:Importing untrained model
2024-06-20 23:29:05,193:INFO:Declaring custom model
2024-06-20 23:29:05,193:INFO:Ridge Classifier Imported successfully
2024-06-20 23:29:05,195:INFO:Cross validation set to False
2024-06-20 23:29:05,195:INFO:Fitting Model
2024-06-20 23:29:05,230:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:29:05,230:INFO:create_model() successfully completed......................................
2024-06-20 23:29:05,361:INFO:_master_model_container: 14
2024-06-20 23:29:05,362:INFO:_display_container: 2
2024-06-20 23:29:05,362:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:29:05,362:INFO:compare_models() successfully completed......................................
2024-06-20 23:29:05,410:INFO:Initializing tune_model()
2024-06-20 23:29:05,410:INFO:tune_model(estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), fold=None, round=4, n_iter=10, custom_grid=None, optimize=Accuracy, custom_scorer=None, search_library=scikit-learn, search_algorithm=None, early_stopping=False, early_stopping_max_iters=10, choose_better=True, fit_kwargs=None, groups=None, return_tuner=False, verbose=True, tuner_verbose=True, return_train_score=False, kwargs={}, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>)
2024-06-20 23:29:05,410:INFO:Checking exceptions
2024-06-20 23:29:05,432:INFO:Copying training dataset
2024-06-20 23:29:05,443:INFO:Checking base model
2024-06-20 23:29:05,446:INFO:Base model : Ridge Classifier
2024-06-20 23:29:05,461:INFO:Declaring metric variables
2024-06-20 23:29:05,469:INFO:Defining Hyperparameters
2024-06-20 23:29:05,579:INFO:Tuning with n_jobs=-1
2024-06-20 23:29:05,580:INFO:Initializing RandomizedSearchCV
2024-06-20 23:29:07,047:INFO:best_params: {'actual_estimator__fit_intercept': False, 'actual_estimator__alpha': 0.55}
2024-06-20 23:29:07,048:INFO:Hyperparameter search completed
2024-06-20 23:29:07,048:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:07,048:INFO:Initializing create_model()
2024-06-20 23:29:07,049:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=True, system=False, add_to_model_list=True, metrics=None, display=<pycaret.internal.display.display.CommonDisplay object at 0x000001ED542309A0>, model_only=True, return_train_score=False, error_score=0.0, kwargs={'fit_intercept': False, 'alpha': 0.55})
2024-06-20 23:29:07,049:INFO:Checking exceptions
2024-06-20 23:29:07,049:INFO:Importing libraries
2024-06-20 23:29:07,049:INFO:Copying training dataset
2024-06-20 23:29:07,057:INFO:Defining folds
2024-06-20 23:29:07,057:INFO:Declaring metric variables
2024-06-20 23:29:07,061:INFO:Importing untrained model
2024-06-20 23:29:07,061:INFO:Declaring custom model
2024-06-20 23:29:07,065:INFO:Ridge Classifier Imported successfully
2024-06-20 23:29:07,073:INFO:Starting cross validation
2024-06-20 23:29:07,074:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:07,195:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,199:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,202:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,203:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,205:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,208:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,210:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,212:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,214:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,215:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,215:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,221:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,228:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,230:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,233:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,233:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,236:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,236:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,238:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,241:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,243:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,290:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,293:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,297:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,307:INFO:Calculating mean and std
2024-06-20 23:29:07,309:INFO:Creating metrics dataframe
2024-06-20 23:29:07,315:INFO:Finalizing model
2024-06-20 23:29:07,353:INFO:Uploading results into container
2024-06-20 23:29:07,354:INFO:Uploading model into container now
2024-06-20 23:29:07,355:INFO:_master_model_container: 15
2024-06-20 23:29:07,356:INFO:_display_container: 3
2024-06-20 23:29:07,356:INFO:RidgeClassifier(alpha=0.55, class_weight=None, copy_X=True, fit_intercept=False,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:29:07,356:INFO:create_model() successfully completed......................................
2024-06-20 23:29:07,458:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:07,458:INFO:choose_better activated
2024-06-20 23:29:07,462:INFO:SubProcess create_model() called ==================================
2024-06-20 23:29:07,462:INFO:Initializing create_model()
2024-06-20 23:29:07,463:INFO:create_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), fold=StratifiedKFold(n_splits=10, random_state=None, shuffle=False), round=4, cross_validation=True, predict=True, fit_kwargs={}, groups=None, refit=True, probability_threshold=None, experiment_custom_tags=None, verbose=False, system=False, add_to_model_list=True, metrics=None, display=None, model_only=True, return_train_score=False, error_score=0.0, kwargs={})
2024-06-20 23:29:07,463:INFO:Checking exceptions
2024-06-20 23:29:07,465:INFO:Importing libraries
2024-06-20 23:29:07,465:INFO:Copying training dataset
2024-06-20 23:29:07,471:INFO:Defining folds
2024-06-20 23:29:07,471:INFO:Declaring metric variables
2024-06-20 23:29:07,472:INFO:Importing untrained model
2024-06-20 23:29:07,472:INFO:Declaring custom model
2024-06-20 23:29:07,472:INFO:Ridge Classifier Imported successfully
2024-06-20 23:29:07,473:INFO:Starting cross validation
2024-06-20 23:29:07,474:INFO:Cross validating with StratifiedKFold(n_splits=10, random_state=None, shuffle=False), n_jobs=-1
2024-06-20 23:29:07,605:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,609:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,609:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,610:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,610:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,616:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,616:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,617:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,617:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,623:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,624:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,635:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,635:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,640:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,641:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,642:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,647:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,647:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,650:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,653:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,656:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,660:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,701:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,705:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,707:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,709:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,710:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,713:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:07,733:INFO:Calculating mean and std
2024-06-20 23:29:07,734:INFO:Creating metrics dataframe
2024-06-20 23:29:07,735:INFO:Finalizing model
2024-06-20 23:29:07,768:INFO:Uploading results into container
2024-06-20 23:29:07,769:INFO:Uploading model into container now
2024-06-20 23:29:07,769:INFO:_master_model_container: 16
2024-06-20 23:29:07,769:INFO:_display_container: 4
2024-06-20 23:29:07,770:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:29:07,770:INFO:create_model() successfully completed......................................
2024-06-20 23:29:07,865:INFO:SubProcess create_model() end ==================================
2024-06-20 23:29:07,866:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001) result for Accuracy is 0.8264
2024-06-20 23:29:07,866:INFO:RidgeClassifier(alpha=0.55, class_weight=None, copy_X=True, fit_intercept=False,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001) result for Accuracy is 0.8264
2024-06-20 23:29:07,866:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001) is best model
2024-06-20 23:29:07,867:INFO:choose_better completed
2024-06-20 23:29:07,867:INFO:Original model was better than the tuned model, hence it will be returned. NOTE: The display metrics are for the tuned model (not the original one).
2024-06-20 23:29:07,878:INFO:_master_model_container: 16
2024-06-20 23:29:07,879:INFO:_display_container: 3
2024-06-20 23:29:07,879:INFO:RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001)
2024-06-20 23:29:07,879:INFO:tune_model() successfully completed......................................
2024-06-20 23:29:08,034:INFO:Initializing plot_model()
2024-06-20 23:29:08,034:INFO:plot_model(plot=auc, fold=None, verbose=True, display=None, display_format=None, estimator=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), feature_name=None, fit_kwargs=None, groups=None, label=False, plot_kwargs=None, save=False, scale=1, self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, system=True)
2024-06-20 23:29:08,034:INFO:Checking exceptions
2024-06-20 23:29:21,503:INFO:Initializing save_model()
2024-06-20 23:29:21,503:INFO:save_model(model=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), model_name=best_model, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=True, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-06-20 23:29:21,504:INFO:Adding model into prep_pipe
2024-06-20 23:29:21,511:INFO:best_model.pkl saved in current working directory
2024-06-20 23:29:21,537:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=614,
                                 solver='auto', tol=0.0001))],
         verbose=False)
2024-06-20 23:29:21,537:INFO:save_model() successfully completed......................................
2024-06-20 23:29:24,059:INFO:Initializing load_model()
2024-06-20 23:29:24,059:INFO:load_model(model_name=best_model, platform=None, authentication=None, verbose=True)
2024-06-20 23:29:24,097:INFO:Initializing predict_model()
2024-06-20 23:29:24,097:INFO:predict_model(self=<pycaret.classification.oop.ClassificationExperiment object at 0x000001ED2C317B50>, estimator=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=614,
                                 solver='auto', tol=0.0001))],
         verbose=False), probability_threshold=None, encoded_labels=False, raw_score=False, round=4, verbose=True, ml_usecase=None, preprocess=True, encode_labels=<function _SupervisedExperiment.predict_model.<locals>.encode_labels at 0x000001ED58492F80>)
2024-06-20 23:29:24,097:INFO:Checking exceptions
2024-06-20 23:29:24,097:INFO:Preloading libraries
2024-06-20 23:29:24,100:INFO:Set up data.
2024-06-20 23:29:24,111:INFO:Set up index.
2024-06-20 23:29:24,148:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py:585: UserWarning: Traceback (most recent call last):
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 580, in _calculate_metric
    calculated_metric = score_func(y_test, target, sample_weight=weights, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\validation.py", line 997, in check_array
    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_array_api.py", line 521, in _asarray_with_order
    array = numpy.asarray(array, order=order, dtype=dtype)
ValueError: could not convert string to float: 'CH'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\utils\generic.py", line 583, in _calculate_metric
    calculated_metric = score_func(y_test, target, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\pycaret\internal\metrics.py", line 144, in __call__
    return self.score_func(y_true, y_pred, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_param_validation.py", line 213, in wrapper
    return func(*args, **kwargs)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_ranking.py", line 619, in roc_auc_score
    y_score = check_array(y_score, ensure_2d=False)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\validation.py", line 997, in check_array
    array = _asarray_with_order(array, order=order, dtype=dtype, xp=xp)
  File "c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\utils\_array_api.py", line 521, in _asarray_with_order
    array = numpy.asarray(array, order=order, dtype=dtype)
ValueError: could not convert string to float: 'CH'

  warnings.warn(traceback.format_exc())

2024-06-20 23:29:24,154:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:24,163:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:24,171:WARNING:c:\Users\ypd04\miniconda3\envs\mlops\lib\site-packages\sklearn\metrics\_classification.py:1561: UserWarning: Note that pos_label (set to 'MM') is ignored when average != 'binary' (got 'weighted'). You may use labels=[pos_label] to specify a single positive class.
  warnings.warn(

2024-06-20 23:29:26,236:INFO:Soft dependency imported: fastapi: 0.111.0
2024-06-20 23:29:26,236:INFO:Soft dependency imported: uvicorn: 0.30.1
2024-06-20 23:29:26,236:INFO:Soft dependency imported: pydantic: 2.7.4
2024-06-20 23:29:26,261:INFO:Initializing save_model()
2024-06-20 23:29:26,261:INFO:save_model(model=RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True, fit_intercept=True,
                max_iter=None, positive=False, random_state=614, solver='auto',
                tol=0.0001), model_name=first_api, prep_pipe_=Pipeline(memory=FastMemory(location=C:\Users\ypd04\AppData\Local\Temp\joblib),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'Loyal...
                                                              missing_values=nan,
                                                              strategy='most_frequent'))),
                ('ordinal_encoding',
                 TransformerWrapper(exclude=None, include=['Store7'],
                                    transformer=OrdinalEncoder(cols=['Store7'],
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0)))],
         verbose=False), verbose=False, use_case=MLUsecase.CLASSIFICATION, kwargs={})
2024-06-20 23:29:26,262:INFO:Adding model into prep_pipe
2024-06-20 23:29:26,269:INFO:first_api.pkl saved in current working directory
2024-06-20 23:29:26,287:INFO:Pipeline(memory=Memory(location=None),
         steps=[('label_encoding',
                 TransformerWrapperWithInverse(exclude=None, include=None,
                                               transformer=LabelEncoder())),
                ('numerical_imputer',
                 TransformerWrapper(exclude=None,
                                    include=['Id', 'WeekofPurchase', 'StoreID',
                                             'PriceCH', 'PriceMM', 'DiscCH',
                                             'DiscMM', 'SpecialCH', 'SpecialMM',
                                             'LoyalCH', 'SalePriceMM',
                                             'SalePriceCH', 'PriceDi...
                                                               drop_invariant=False,
                                                               handle_missing='return_nan',
                                                               handle_unknown='value',
                                                               mapping=[{'col': 'Store7',
                                                                         'data_type': dtype('O'),
                                                                         'mapping': No     0
Yes    1
NaN   -1
dtype: int64}],
                                                               return_df=True,
                                                               verbose=0))),
                ('trained_model',
                 RidgeClassifier(alpha=1.0, class_weight=None, copy_X=True,
                                 fit_intercept=True, max_iter=None,
                                 positive=False, random_state=614,
                                 solver='auto', tol=0.0001))],
         verbose=False)
2024-06-20 23:29:26,287:INFO:save_model() successfully completed......................................
